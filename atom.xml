<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Road&#39;s Blog</title>
  
  <subtitle>这里是 @大马路叫Road 的个人博客</subtitle>
  <link href="https://road-tech.github.io/hexo/atom.xml" rel="self"/>
  
  <link href="https://road-tech.github.io/hexo/"/>
  <updated>2022-01-30T16:00:00.000Z</updated>
  <id>https://road-tech.github.io/hexo/</id>
  
  <author>
    <name>Road</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1L小主机系列 - Lenovo M910X</title>
    <link href="https://road-tech.github.io/hexo/Hackintosh_LenovoM910X_8100B_RX460_OC/"/>
    <id>https://road-tech.github.io/hexo/Hackintosh_LenovoM910X_8100B_RX460_OC/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-01-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>省流助手，EFI下载链接：</p><p><a href="https://github.com/Road-tech/Hackintosh_LenovoM910X_8100B_RX460_OC">https://github.com/Road-tech/Hackintosh_LenovoM910X_8100B_RX460_OC</a></p><h1 id="关于M910X"><a href="#关于M910X" class="headerlink" title="关于M910X"></a>关于M910X</h1><p>联想的M910X（p320 tiny），一个非常好玩的1L迷你小主机。Q270的主板，双M.2插槽、一个PCIe扩展槽、双通道ddr4、6个USB，同时是最后一代可以刷bios上魔改U的联想小主机。再往上的M920x，P340都是双BIOS设计，无法刷bios了，也基本告别了便宜好玩的ES版CPU或者魔改U。</p><p>现在这台小主机性价比非常高，700出头的价格就买到这样的强悍扩展性，放在这个价位简直无敌的存在，而且可玩性非常高。这个价格换成300系芯片组的小主机，基本都没有双M.2接口（除了dell 7080mff 低压版），更别说PCIe扩展了。而他的下一代M920X，现在还要1300的价格，相比起来只多了个typc-C接口，不过原生可以上8代U，但只能支持正式版。M910x原配的显卡为RX460，现在咸鱼原厂全新只要600左右的价格。而M920x配套的rx560现在咸鱼要差不多1000，一个性能差不多的马甲卡居然贵那么多。当然如果不追求黑苹果，只为最强的独显性能，最新的M930X，原厂可以选配到P620。当然动手能力强的可以上GTX1650，妥妥的小钢炮，就是要切挡板，考验手艺。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-10-58-47-lenovo-thinkCentre-M910x-tiny-hero-front-1.webp"></p><p>图源联想官网<a href="https://www.lenovo.com/us/en/p/desktops/thinkcentre/m-series-tiny/m910x-tiny/11tc1mt910x">https://www.lenovo.com/us/en/p/desktops/thinkcentre/m-series-tiny/m910x-tiny/11tc1mt910x</a></p><h2 id="我的硬件配置"><a href="#我的硬件配置" class="headerlink" title="我的硬件配置"></a>我的硬件配置</h2><table><thead><tr><th></th><th align="center">Specifications / 型号</th><th align="center">Note / 备注</th></tr></thead><tbody><tr><td>Motherboard/主板:</td><td align="center">Lenovo M910X Q270</td><td align="center">1L 迷你主机</td></tr><tr><td>CPU/处理器:</td><td align="center">I3-8100B</td><td align="center">闪电家魔改U</td></tr><tr><td>CPU Cooler/散热器:</td><td align="center">准系统自带</td><td align="center"></td></tr><tr><td>Hard Drive/硬盘:</td><td align="center">Hikvision C2000pro 512gb</td><td align="center"></td></tr><tr><td>RAM/内存:</td><td align="center">Samsung 8G DDR4 2666MHz X1</td><td align="center"></td></tr><tr><td>Wireless Card/无线网卡:</td><td align="center">BCM94360cs2+转接卡</td><td align="center">白果拆机卡</td></tr><tr><td>Tower Case/机箱:</td><td align="center">准系统自带</td><td align="center"></td></tr><tr><td>Power/电源:</td><td align="center">Lenovo 20v 6.75A 135w DC adapter</td><td align="center"></td></tr></tbody></table><hr><h1 id="一些折腾点"><a href="#一些折腾点" class="headerlink" title="一些折腾点"></a>一些折腾点</h1><h2 id="关于魔改U"><a href="#关于魔改U" class="headerlink" title="关于魔改U"></a>关于魔改U</h2><p>聊回这台M910X，要上这个魔改U8100B/8500B/8700B，需要刷入修好的BIOS。一般魔改u的老板都会提供一个修好的BIOS，而闪电家给我提供的bios，虽然能点亮，但是因为没有写入S/N等信息，开机滴滴滴两声报错，而且BIOS版本也太老了，还关不掉cfg-lock。</p><p>于是需要自己修改bios，如果你有6代或者7代的亮机U，这是最方便的，直接进windows更新bios到最新版本。这里感叹一下，这台2018年就发布的机器，到2021-7-6居然还更新了一版BIOS，感觉换成那些零售的diy主板，早就停止支持了。</p><p>官方BIOS下载地址在这里：<a href="https://newsupport.lenovo.com.cn/driveList.html?fromsource=driveList&selname=ThinkCentre%20M910x">点我下载</a></p><p>更新完BIOS后，用编程器把BIOS提取出来，使用D大的工具进行魔改，具体操作请参考：<a href="http://www.smxdiy.com/thread-1299-1-1.html">部分 Lenovo 联想 LGA1151 主机 支持 8 代 9 代 BIOS 修改工具</a></p><p>如果没有亮机U，那只能用编程器直接把BIOS提取出来，参照上面链接里的强刷教程，刷入魔改bios后，进Windows用WriteSN工具补回S/N等信息。</p><p>闪电家提供的BIOS和自己修改的BIOS我都放在了<a href="https://github.com/Road-tech/Hackintosh_LenovoM910X_8100B_RX460_OC/tree/main/%E9%AD%94%E6%94%B9BIOS">魔改BIOS</a>的文件夹内，可自行下载研究。</p><p><strong><em>如果你选择直接刷入这两版BIOS，而不是自己提取修改，请务必用WriteSN工具补回原机的S/N等信息</em></strong></p><p>BIOS芯片为25L12873F，具体位置参考这个图（图源自SMZDM的<a href="https://zhiyou.smzdm.com/member/9509386572/">折了个腾</a>）</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-00-47-21-5ecdd94a3f0322866.jpg_e1080.webp" alt="BIOS芯片"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-00-47-11-5ecdd94a44bfd6611.jpg_e1080.webp" alt="具体位置"></p><h2 id="关于CFG-Lock"><a href="#关于CFG-Lock" class="headerlink" title="关于CFG-Lock"></a>关于CFG-Lock</h2><p>一般来说，黑苹果想要实现完美的休眠，关闭CFG-Lock是必要条件的。</p><p>如果你选择刷入我自己改好的BIOS，那这个BIOS已经把隐藏的CFG-lock开关显示出来，直接在BIOS里面关闭就好了。</p><p>如果选择自己修改BIOS，BIOS没有CFG-lock选项，可以用opencore引导解锁。在启动菜单选择页面选择ControlMsrE2，我已经在EFI默认配置了unlock参数，进入后可以看到CFG-lock的状态，同时尝试解锁CFG-lock。</p><h2 id="关于显卡"><a href="#关于显卡" class="headerlink" title="关于显卡"></a>关于显卡</h2><p>这台小主机有两张显卡，分别是CPU的UHD630以及独显RX460。</p><p>在macOS里，即便有独显，核显还是有作用的，可以用于加速，所以630核显直接配置<code>AAPL,ig-platform-id</code>为<code>0300913E </code>，不需要做更多的显卡输出修复。</p><p>独显直接免驱动，Emmm，这算是我折腾过最简单的方案了。</p><h2 id="关于声卡仿冒"><a href="#关于声卡仿冒" class="headerlink" title="关于声卡仿冒"></a>关于声卡仿冒</h2><p>省流助手：<code>layout-id</code>为<code>12</code>，也就是<code>0C000000</code></p><p>一开始我参照了网上现有的opencore配置，发现声卡仿冒的<code>layout-id</code>一般都是设置为11和21两种。我分别试了下，设置11的时候主机的内置音箱有声音，插耳机没声音。设置为21的时候情况相反。不完美很难受</p><p>后来网上查资料看到这种情况，需要自己定制仿冒声卡，于是我参考了<a href="https://shuiyunxc.gitee.io/2020/03/21/M920x/index/">OpenCore引导安装联想-M920x黑苹果之历程</a>这篇文章，按照文章给出的参数自己编译了AppleALC.Kext。但是怎么弄都不行，明明所有参数都是对的，最后才发现原来这是M920X教程，汗- 。-！。（M910X的兄弟型号是P320 tiny，导致我老是把M910X记成M920X）</p><p>M920X的声卡是ALC235，而M910X的声卡是ALC294，也就是这些参数并不通用。自己仿冒声卡步骤超级无敌复杂，无敌头疼。但是在GitHub翻AppleALC的代码的时候，发现2018年7月的时候MacPeet提交了关于Realtek ALC294 for Lenovo M710Q的仿冒配置，<code>layout-id</code>为12。考虑到同一代的小主机的硬件设计高度相同，于是就去试了下12，果然是完美的！内置音箱和耳机都正常工作。所以<code>layout-id</code>设置为12就好了！感谢MacPeet大佬。</p><h2 id="关于网卡的选择"><a href="#关于网卡的选择" class="headerlink" title="关于网卡的选择"></a>关于网卡的选择</h2><p>黑苹果的网卡选择有很多，图简单省事的话，可以选黑果小兵的BCM94360Z3或者BCM94360Z4。应该加个kext就可以完美驱动了。<br>链接可以参考这<a href="https://blog.daliansky.net/BCM94360Z4-m.2-NGFF-interface-four-antenna-notebook_small-host-dedicated-black-Apple-wireless-network-card-driver-tutorial.html">【黑果小兵独家】BCM94360Z4/BCM94360Z3 m.2 NGFF接口四天线笔记本/小主机专用黑苹果无线网卡驱动教程</a></p><p>不过考虑到m910x内部对无线网卡的高度没什么限制，最推荐的还是苹果iMac拆机的BCM94360cs2或者BCM943602cs配合转接卡，什么驱动都不用补，最省事。但是长度有限制，BCM94360cs2要磨掉一点PCB才能刚刚好放进去，更长的BCM943602cs就别想了。所以这里推荐反向的转接卡，再用点热熔胶固定。</p><p>具体可以参考这个图：（图源自SMZDM的<a href="https://zhiyou.smzdm.com/member/9509386572/">折了个腾</a>）</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-00-47-41-5ecdd94fe51db2827.jpg_e1080.webp" alt="反向转接卡"></p><h2 id="关于内置喇叭升级"><a href="#关于内置喇叭升级" class="headerlink" title="关于内置喇叭升级"></a>关于内置喇叭升级</h2><p>M910X内部有一个很小的喇叭（下图红色框），虽然上文说的AppleALC设定好ID后，内置喇叭和3.5mm耳机接口都可以正常工作，但是内置喇叭声音跟蚊子一样，音量调到最大也只有一点点且毫无质感。看到闲鱼上有卖据说是顶配P330 tiny上用的大功率喇叭，功率高达2W（ -.- ）。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/31-14-47-29-IMG_2733%20%E6%8B%B7%E8%B4%9D.webp"></p><p>不过卖家也不知道m910x能不能用。自己看了下M910X跟M920X差不多都有个螺丝孔和支架（上图篮框），接口也一样（上图绿框），决定买个试试。（但是这玩意真心贵，毫无技术含量的东西居然要80+）。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/31-14-48-52-IMG_2735%20%E6%8B%B7%E8%B4%9D.webp"></p><p>上图为装好后的效果，确实是完美兼容的，音量也大了很多，音量开到一半就感觉很足了。但是声音依旧没什么质感。也就是从不及格到及格的水平，可以用了，但是绝对对不起他的价格。</p><h2 id="关于BIOS设定"><a href="#关于BIOS设定" class="headerlink" title="关于BIOS设定"></a>关于BIOS设定</h2><h3 id="Disable："><a href="#Disable：" class="headerlink" title="Disable："></a>Disable：</h3><ul><li><p>设备：</p></li><li><p>System Agent(SA) Configuration -&gt; VT-d </p></li><li><p>ATA设备清单 -&gt; Configure SATA as -&gt; AHCI  </p></li><li><p>显示菜单 -&gt; Auto</p></li><li><p>网络菜单 -&gt; PXE启动 </p></li><li><p>高级菜单：</p></li><li><p>CPU Configuration -&gt; SW Guard Extensions (SGX)</p></li><li><p>Power &amp; Performance -&gt; CPU -&gt; CPU Lock Configuration -&gt; CFG Lock  </p></li><li><p>启动菜单：</p></li><li><p>兼容模块</p></li></ul><h3 id="Enable："><a href="#Enable：" class="headerlink" title="Enable："></a>Enable：</h3><ul><li><p>设备：</p></li><li><p>System Agent(SA) Configuration -&gt; Above 4G MMIO BIOS assignment  </p></li><li><p>高级菜单： </p></li><li><p>CPU Configuration -&gt; Intel (VMX) Virtualization Technology (VT-x)  </p></li><li><p>启动菜单：</p></li><li><p>启动方式：UEFI  </p></li></ul><hr><h1 id="Functions-功能"><a href="#Functions-功能" class="headerlink" title="Functions/功能"></a>Functions/功能</h1><h3 id="Work："><a href="#Work：" class="headerlink" title="Work："></a>Work：</h3><ul><li>All DP ports (1080p) on RX460  </li><li>Audio output on DP  </li><li>All USB ports  </li><li>Wi-Fi &amp; Bluetooth  </li><li>3.5mm Audio Jack and Internal Mic</li><li>Airdrop  </li><li>AirPlay  </li><li>Continuity  </li><li>QE/CI of Intel UHD 630 &amp; rx460</li><li>CPU Power Management</li><li>Sleep </li></ul><h3 id="Not-working"><a href="#Not-working" class="headerlink" title="Not working:"></a>Not working:</h3><ul><li><ul><li></li></ul></li></ul><h3 id="Not-tested-yet"><a href="#Not-tested-yet" class="headerlink" title="Not tested yet:"></a>Not tested yet:</h3><ul><li>4k display  </li></ul><hr><h1 id="Performance-展示"><a href="#Performance-展示" class="headerlink" title="Performance/展示"></a>Performance/展示</h1><p>我已经超级无敌懒，根本不想自己拍照，都是网上现找的图，如侵删。</p><p>以下图源自<a href="https://forums.lenovo.com/t5/ThinkCentre-A-E-M-S-Series/Lenovo-M910x-Tiny-Extreme-RX-460-graphics-option-details-and-avail/m-p/3725943?page=2">English Community-Lenovo Community</a>以及<a href="https://www.lenovo.com/us/en/p/desktops/thinkcentre/m-series-tiny/m910x-tiny/11tc1mt910x">联想官网</a></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-11-10-50-lenovo-thinkCentre-M910x-tiny-hero.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-11-12-54-lenovo-thinkCentre-M910x-tiny-mdp-ports-5.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-11-12-24-lenovo-thinkCentre-M910x-tiny-left-right-side-7.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-11-13-35-121854iF16DE5EBBC821E4B.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-11-13-41-121853iE5F561AB0C4920BB.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-10-33-45-CPU%26%E6%98%BE%E5%8D%A1.webp" alt="CPU变频&amp;显卡驱动正常"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-10-33-54-USB%E5%AE%9A%E5%88%B6.webp" alt="USB定制"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-10-34-02-%E8%93%9D%E7%89%99.webp" alt="蓝牙工作正常"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2022/01/24-10-34-12-Wi-Fi.webp" alt="Wi-Fi工作正常"></p><hr><h1 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference/参考"></a>Reference/参考</h1><p><a href="https://dortania.github.io/OpenCore-Install-Guide/">Dortania’s OpenCore Install Guide</a></p><p><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁 </a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a> - <a href="https://blog.xjn819.com/">XJN</a> </p><p><a href="https://github.com/acidanthera/AppleALC">acidanthera/AppleALC</a></p><p><a href="https://github.com/ylen0l/Hackintosh-Lenovo-Thinkcentre-M910x-OpenCore-Efi">xia54/Hackintosh-Lenovo-Thinkcentre-M910x-OpenCore-Efi</a></p><p><a href="https://osxlatitude.com/forums/topic/13992-success-lenovo-m720q-m920q-p330-tiny-catalina-10156-opencore/">[SUCCESS] Lenovo M720q , M920q, P330 Tiny Catalina 10.15.6 OPENCORE</a></p><p><a href="https://github.com/chencaidy/Hackintosh-OC-Lenovo-ThinkCentre-M920x">chencaidy/Hackintosh-OC-Lenovo-ThinkCentre-M920x</a></p><p><a href="https://post.smzdm.com/p/ammkv6vv/">一台比较完美的黑苹果小主机 联想M910Q折腾记 opencore EFI分享</a></p>]]></content>
    
    
    <summary type="html">联想的M910X（p320 tiny），一个非常好玩的1L迷你小主机。Q270的主板，双M.2插槽、一个PCIe扩展槽、双通道ddr4、6个USB，同时是最后一代可以刷bios上魔改U的联想小主机。再往上的M920x，P340都是双BIOS设计，无法刷bios了，也基本告别了便宜好玩的ES版CPU或者魔改U。...</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
    <category term="1L小主机" scheme="https://road-tech.github.io/hexo/tags/1L%E5%B0%8F%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="8100B" scheme="https://road-tech.github.io/hexo/tags/8100B/"/>
    
    <category term="M910X" scheme="https://road-tech.github.io/hexo/tags/M910X/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt配置记录</title>
    <link href="https://road-tech.github.io/hexo/OpenwrtConfigurationRecord/"/>
    <id>https://road-tech.github.io/hexo/OpenwrtConfigurationRecord/</id>
    <published>2022-01-04T16:00:00.000Z</published>
    <updated>2022-01-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近收了一台DIY属性拉满的迷你4G无线路由，出自大R杂货的MagicBox双频路由。大佬定制的主板，小巧的体积加上支持双频WiFi、LTE/4G网络、OpenWrt等属性，可以说极客感满满。</p><p>不过大佬默认只提供原版纯净的固件，什么功能都没有，甚至主题都没有。虽然也没法集成太多的功能，但是后续想要更新版本就不方便了，还需要自己重新安装各种功能和配置各种参数。所以还是研究了下GitHub action和Openwrt，把自己需要功能和配置编辑好。后续openwrt只要更新了，GitHub便会自动帮我编译新固件。所以这篇文章就是记录各种配置的过程，方便日后的查询。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/29-11-14-55-IMG_2409.webp"></p><h2 id="硬件配置："><a href="#硬件配置：" class="headerlink" title="硬件配置："></a>硬件配置：</h2><ul><li><p>高通 QCA9531 550Mhz CPU + 9887 5G Wi-Fi 芯片</p></li><li><p>16M闪存 / 128M内存</p></li><li><p>433Mbps + 300Mbps 双频 Wi-Fi</p></li><li><p>USB 扩展口（ LTE 版两个 / Wi-Fi 版一个）</p></li><li><p>两个百兆网口（默认 1WAN 1LAN）</p></li><li><p>TF 卡槽（Wi-Fi 版无）</p></li><li><p>LTE 版为 Type-C 供电 / Wi-Fi 版为 Micro USB 供电。</p></li><li><p>4G LTE 版为下图3D打印的黑色尼龙外壳 / Wi-Fi 版为上图亚克力外壳</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/29-11-14-45-IMG_2410.webp"></p></li></ul><h2 id="Openwrt相关"><a href="#Openwrt相关" class="headerlink" title="Openwrt相关"></a>Openwrt相关</h2><h3 id="选择openwrt版本"><a href="#选择openwrt版本" class="headerlink" title="选择openwrt版本"></a>选择openwrt版本</h3><p>首先openwrt分为稳定版和开发版，目前稳定版的版本定在19.07，而开发版为20.XX。目前openwrt对9531的支持直到19.07稳定版，目前开发版是不支持的。</p><p>然后openwrt也会有不同的分支，除了官方原版<a href="https://github.com/openwrt/openwrt">openwrt</a>，还有<a href="https://github.com/coolsnowwolf">coolsnowwolf</a>大佬的<a href="https://github.com/coolsnowwolf/lede">LEDE</a>、<a href="https://github.com/Lienol">Lienol</a>大佬的<a href="https://github.com/Lienol/openwrt">openwrt</a>。</p><p>我很浅略的对比了三个版本的代码，LEDE和Lienol的openwrt会针对我们的使用习惯进行优化，比如默认生成Wi-Fi的ssid名称，会区分2.4G和5G。同时会集成更多的功能，让我们的编译更加方便，不用一个个的去寻找添加，而且自带的源也能保证与系统稳定运行。当然估计还有一些性能上的优化，这方面我就看不出来了。</p><p>因为AR9531目前只能支持19.07，所以在编译的时候需要留意选择正确的版本，官方原版的openwrt和Lienol大的不同版本是在GitHub上的不同分支，而coolsnowwolf大佬的不同版本是不同的库，这里是要留意的。</p><p><a href="https://github.com/coolsnowwolf">coolsnowwolf</a>大佬的lede不同版本的库:</p><ul><li><p>稳定版   <a href="https://github.com/coolsnowwolf/openwrt">https://github.com/coolsnowwolf/openwrt</a></p></li><li><p>开发版   <a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></p></li></ul><h3 id="生成编译配置"><a href="#生成编译配置" class="headerlink" title="生成编译配置"></a>生成编译配置</h3><p>这一步目前没有其他方法，还是需要自行搭建一个ubuntu平台，拉取整个openwrt的库再进行<code>make menuconfig</code> 操作生成编译配置。不过好在这个配置确定后，后续不需要修改了。所以也就麻烦这一次。</p><h4 id="集成LTE所需驱动"><a href="#集成LTE所需驱动" class="headerlink" title="集成LTE所需驱动"></a>集成LTE所需驱动</h4><p>依照老板大R的要求，驱动LTE所需的3个驱动，分别是：</p><p>kmod-usb-net</p><p>kmod-usb-net -&gt; kmod-usb-net-rndis</p><p>usb-modeswitch</p><h4 id="添加所需的功能"><a href="#添加所需的功能" class="headerlink" title="添加所需的功能"></a>添加所需的功能</h4><p>这里可以按需添加，功能主要都集成在Luci下。Lede和Lienol的版本集成的功能会明显更多更方便。  </p><p>需要注意的是，添加功能后要注意固件的大小，不要让最终的固件大于16M导致编译失败。同时如果出现功能太多需要调整配置，我强烈建议先删除默认的.config文件重新配置。因为你选择一个功能时，可能会自动选择所需的各种以来，而你只是单纯的取消这个功能，相关的依赖并不会联同取消，这样很有可能会出现你明明取消了这个功能，但是固件并没有减少，因为相关的大量依赖还是被编译进去了。  </p><p>下面记录一些相关的命令：</p><ol><li><p>添加luci-theme-argon主题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd openwrt/package</span><br><span class="line">git clone https://github.com/jerrykuku/luci-theme-argon.git #拉取主题 </span><br><span class="line">sed -i &#x27;s/luci-theme-bootstrap/luci-theme-argon/g&#x27; feeds/luci/collections/luci/Makefile #修改默认的主题</span><br><span class="line">make menuconfig #选择 LUCI-&gt;Theme-&gt;Luci-theme-argon  </span><br></pre></td></tr></table></figure></li><li><p>中文支持</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig #选择LuCI-&gt;Modules-&gt;Translations-&gt;Chinese</span><br></pre></td></tr></table></figure></li></ol><h4 id="修改默认的设定"><a href="#修改默认的设定" class="headerlink" title="修改默认的设定"></a>修改默认的设定</h4><ol><li><p>默认开启wifi </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/disabled=1/disabled=0/g&#x27; package/kernel/mac80211/files/lib/wifi/mac80211.sh</span><br><span class="line">sed -i &#x27;s/OpenWrt/Road-MagicBox/g&#x27; package/kernel/mac80211/files/lib/wifi/mac80211.sh</span><br></pre></td></tr></table></figure></li><li><p>修改路由默认ip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/192.168.1.1/192.168.8.1/g&#x27; package/base-files/files/bin/config_generate</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把lan口默认ip由192.168.1.1改成192.168.8.1</span></span><br></pre></td></tr></table></figure></li><li><p>添加wwan接口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;$d&#x27; package/base-files/files/bin/config_generate</span><br><span class="line">sed -i &#x27;$a uci set network.wwan=interface&#x27; package/base-files/files/bin/config_generate</span><br><span class="line">sed -i &#x27;$a uci set network.wwan.ifname=eth2&#x27; package/base-files/files/bin/config_generate</span><br><span class="line">sed -i &#x27;$a uci set network.wwan.proto=dhcp&#x27; package/base-files/files/bin/config_generate</span><br><span class="line">sed -i &#x27;$a uci set network.wwan.up=1&#x27; package/base-files/files/bin/config_generate</span><br><span class="line">sed -i &#x27;$a uci commit&#x27; package/base-files/files/bin/config_generate</span><br></pre></td></tr></table></figure></li><li><p>wwan接口添加防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &quot;19a \ \ \ \ \ \ \ \ list   network          &#x27;wwan&#x27; &quot; package/network/config/firewall/files/firewall.config</span><br></pre></td></tr></table></figure></li><li><p>修改主机名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/OpenWrt/MagicBox/g&#x27; package/base-files/files/bin/config_generate</span><br></pre></td></tr></table></figure></li><li><p>设定root密码为password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;1d&#x27; package/base-files/files/etc/shadow</span><br><span class="line">sed -i &#x27;1i root:$1$H\/ab6bvd$yWkIzUrKuLPTNHY9akBDC0:18988:0:99999:7:::&#x27;  package/base-files/files/etc/shadow</span><br></pre></td></tr></table></figure></li></ol><h2 id="Github-action相关"><a href="#Github-action相关" class="headerlink" title="Github action相关"></a>Github action相关</h2><p>自动编译脚本源自<a href="https://github.com/P3TERX">P3TERX</a>/<a href="https://github.com/P3TERX/Actions-OpenWrt">Actions-OpenWrt</a>，脚本使用说明：<a href="https://github.com/P3TERX/Actions-OpenWrt">English</a> | <a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html">中文</a></p>]]></content>
    
    
    <summary type="html">本文记录Openwrt配置的全过程</summary>
    
    
    
    <category term="软件技巧" scheme="https://road-tech.github.io/hexo/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="配置记录" scheme="https://road-tech.github.io/hexo/tags/%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    
    <category term="OpenWrt" scheme="https://road-tech.github.io/hexo/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>复刻！赵总MK1，一个3D打印版的Thin-ITX机箱</title>
    <link href="https://road-tech.github.io/hexo/ThinItxCaseMK1/"/>
    <id>https://road-tech.github.io/hexo/ThinItxCaseMK1/</id>
    <published>2021-12-15T16:00:00.000Z</published>
    <updated>2021-12-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>      许久前在CHH看到赵总设计的这款机箱后（<a href="https://www.chiphell.com/thread-1424686-1-1.html">链接在此</a>），就深深中毒了。奈何这片文章发表与2015年，且据闻这个机箱的产量极少，意味着想拥有一台几乎不可能了。</p><p>      去年diy了一台Mac mini，同样都是使用的Thin itx主板，虽然千辛万苦等到了成品套件，但是对于套件的散热能力并不满意。也尝试了几种方案，包括魔改下压式散热、优化风道版的尼米兹散热、加大散热鳍片的面积，最终的效果也还是不太满意。毕竟受限于风扇的尺寸，再怎么优化，没有足够的风量带走热量，这台diy的Mac mini永远是个小闷罐。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-38-19-Mac%20mini%20%E6%96%B0%E6%95%A3%E7%83%AD%E6%96%B9%E6%A1%88.webp" alt="魔改下压散热方案（图源B站Tifika）vs优化风道版的尼米兹散热方案（图源活久见大佬）"></p><p>​      另外市面上售卖的thin itx机箱，几乎都是洞洞流，再搭配超薄的下压式散热。丑爆之余，散热功率也就那样。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-39-07-%E5%B8%82%E9%9D%A2%E4%B8%8A%E7%9A%84thin%20itx%E6%9C%BA%E7%AE%B1.webp"></p><p>      So，在此想起赵总的这款MK1，4个风扇，气流覆盖整个主板。垂直风道，烟囱效应，热空气自然的往上走，享受物理学加成，理论上风扇转速不用很高可以换来不错的效果。而且这样的散热方式，可以很快乐的使用侧透面板，告别洞洞流机箱。</p><p>      之前折腾Mac mini的时候，入手了3D打印机，也自学了Sketchup，画个简单的模型也没啥问题。虽然工具都不是专业的，但也算是具备折腾的条件了。虽然说这个机箱的结构并不算复杂，但是从一开始的设计到各种细节调整，前前后后也折腾了大半年，才到现在相对满意的样子。为了避免出行日后买不到零件，于是有了尽可能用市售的通用零件的原则，实现了原版四个风扇上吹风，垂直风道的布局，并且原版有的监控小屏幕、2.5寸盘位都复现了。因为我不会画pcb，所以最难搞的就是那块风扇hub调速器，最终也在淘宝找到几乎一样的版本。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-39-26-fan-hub.webp"></p><p>      最后放个图，左边是原版的赵总MK1，右边是我复刻的版本。虽然质感方面完全没得比，但是一眼过去也能凑合。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-37-47-MK1%E5%8E%9F%E7%89%88VS%E5%9B%BE.webp" alt="MK1原版VS复刻版"></p><h2 id="机箱特性"><a href="#机箱特性" class="headerlink" title="机箱特性"></a>机箱特性</h2><ol><li><p>沿用原版四个风扇上吹风，垂直风道的布局；</p></li><li><p>通用的挡板孔位，兼容标准的thin itx 主板；</p></li><li><p>支持约3寸的LCD监控屏；</p></li><li><p>支持4个4cm风扇，具体高度如4010、4015、4020、4028尺寸的风扇都兼容；</p></li><li><p>通过风扇hub调速器实现风扇调速，支持主板pwm调速和手动调速，最高可支持5个风扇；</p></li><li><p>支持1个2.5寸硬盘，M.2硬盘支持情况取决于主板；</p></li><li><p>机箱3D打印（穷+没渠道CNC），机箱每部分的颜色可以自由定制。</p></li><li><p>成品尺寸211.7x183.2x53.8mm（高x深x宽，不含底座）。原版尺寸220x190x50mm</p></li></ol><h2 id="迭代版本介绍"><a href="#迭代版本介绍" class="headerlink" title="迭代版本介绍"></a>迭代版本介绍</h2><p>      首先1.0版本，就是照搬原版的结构，用两根长杆链接机箱前后面板和主板。当然验证后就发现了几个问题：</p><ol><li>原版的金属材质可以直接攻丝固定零件，而3D打印的部件因为强度不够，需要热熔螺母加热嵌进去，在用螺丝把两根杆链接前后面板。但是这样固定的机箱并不稳定，容易晃动。主板反而成为稳定整个机箱的部件，感觉会影响主板寿命。</li><li>还是因为3D打印的材质强度不够，只用两个杆固定主板的话，原版目测1mm厚的铝材强度就够了，而PLA材质需要把杆加厚到6mm强度才够，会导致机箱体机增加。</li><li>机箱面板的前半部分壁厚设计太小了，而且一个长条形的形状加上3D打印的材质容易冷却收缩，导致部件打印出来非常容易变弯，不管是PLA材质还是尼龙烧结都很难避免。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-40-21-%E6%9C%BA%E7%AE%B1V1.0.webp"></li></ol><p>      接下来的2.0版本就重新画了主板的支架，将两根长杆换成了一个框，想着这样固定机箱应该就不会那么容易晃动了。然后想到这么一个简单的框，不需要CNC加工的话，弄成金属的也不会很贵，然后就TB加工了一个，也不贵，一个框20，但是毛刺太多，割手，也不好看。精加工嘛，价格又上去了，不适合我的钱包，所以还是考虑回打印的方案。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-40-31-itx%E6%94%AF%E6%9E%B6.webp"></p><p>      再下来的3.0版本呢，用回PLA打印主板支架。但是又回到了老问题，一个正方框，3D打印的材质强度还是不够，还是晃。怎么解决呢？既然正方形支架不稳定，那就改成圆角的，然后加厚到4mm。这个时候又太厚了，影响体积，于是想了个偷鸡的方法，把前后面板结合的位置减薄。最终修个圆角美化一些，再恬不知耻的打上自己的名字，装逼的同时还能节省一点点打印耗材。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-41-48-itx%E6%94%AF%E6%9E%B6-%E5%9C%86%E8%A7%922.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-41-56-itx%E6%94%AF%E6%9E%B6-%E5%9C%86%E8%A7%92-2mm-V2.0.webp"></p><p>      最终再弄个开关，画好io口和各种螺丝孔的位置，增加LCD监控屏和风扇Hub的固定位置，再调整亿点点细节机箱就弄完了。（半年就过去了，耗材都浪费了了好几卷）</p><p>      最终设计图就如下：</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-42-04-%E6%9C%BA%E7%AE%B1-5mm-V0.webp"></p><h2 id="细节展示"><a href="#细节展示" class="headerlink" title="细节展示"></a>细节展示</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-42-10-IMG_2088-1.webp"></p><p>      全览</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-44-29-IMG_2089-1.webp"></p><p>      主板支架，预留沉头螺丝孔，M3孔径。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-44-38-IMG_2094-1.webp"></p><p>      分别是前后面板，面板四周预留直径4mm深度3mm的孔，用来植入热熔螺母。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-44-44-IMG_2122-1.webp"></p><p>      这是两种镶入铜螺母，左边的是注塑螺母，右边的是热熔螺母。可以看到两种螺母的纹路不同，这里应该使用热熔螺母才对。一开始我用了注塑螺母，导致螺母无法固定牢固。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-44-48-IMG_2125.webp"></p><p>      这里使用的是M3*3-4.2的热熔螺母，可以看到螺母一端有一圈比较小的头部，小头直径是4mm的，刚好可以放进预留的孔位，这样就能很精准的定位螺母的位置。 </p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-45-09-IMG_2126-1.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-45-15-IMG_2131_2.gif"></p><p>      植入热熔螺母很简单，拔螺母放正，随便一个电烙铁，≈200度，保持垂直，轻轻压上去就可以了。压入后再检查下是否有倾斜，如果不是可以再用烙铁调整下。如果担心手抖，可以尝试使用尖头的烙铁，或者那种专业植入设备（虽然划不来）。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-45-45-IMG_2134.webp"></p><p>      植入完后是这样的，刚刚好能嵌入，没有材料被挤出。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-45-51-IMG_2136-1.webp"></p><p>      把所有的预留孔位都植入，前后面板一共28个</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-45-59-IMG_2146-1.webp"></p><p>      这里是机箱的上盖，也需要植入两个螺母，用来固定风扇调速器。不过这里热熔螺母的尺寸会不同，为M2*3-3.2。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-05-IMG_2098-1.webp"></p><p>      主机底座，同样预留了m3螺丝孔，通过m3螺丝与主机固定。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>      这次准备了两套配置，虽然机箱兼容标准的thin itx主板，不过还是选择了两块有特色的主板，分别是过气网红DQ77KB搭配i5-3475s以及比较少见的华硕Q170T搭配QNVH魔改u。配置一股捡垃圾的气息，详细配置如下：</p><table><thead><tr><th></th><th>配置一</th><th>配置二</th></tr></thead><tbody><tr><td>主板:</td><td>Intel® Desktop Board DQ77KB</td><td>Asus Q170T</td></tr><tr><td>CPU:</td><td>i5-3475s,4c4t,6M Cache,up to 3.6GHz</td><td>QNVH(i7-8850h),6c12t,9M Cache,up to 3.6GHz</td></tr><tr><td>显卡:</td><td>Intel® HD Graphics 4000</td><td>Intel® UHD Graphics 630</td></tr><tr><td>散热器:</td><td>超微 SNK-P0046P LGA1150/51/55 + 建准 4010 12V/0.8W 4500RPM x4</td><td>超微 SNK-P0046P LGA1150/51/55 + 建准 4020 12V/0.8W 5200RPM x4</td></tr><tr><td>硬盘:</td><td>Intel 530 180G MSATA MLC SSD</td><td>海康 C2000pro 512gb</td></tr><tr><td>内存:</td><td>不知名 8G DDR3 1600 笔记本电脑内存条 x2</td><td>枭鲸 16G DDR4 2666 笔记本电脑内存条 x2</td></tr><tr><td>无线网卡:</td><td>-</td><td>Intel® Wi-Fi 6 AX200</td></tr><tr><td>电源:</td><td>HP 74/50mm 19v 90w DC power adapter</td><td>Dell 74/50mm 19v 130w DC power adapter</td></tr></tbody></table><p>      首先先介绍下过气网红Intel DQ77KB，一代神板，Thin ITX版型。这个2012年出厂的主板拥有双千兆网口、4个USB3.0、4个SATA接口、Mini PCIe、mSATA、 PCI-E x4接口，可谓是一应俱全，甚至放到现在都不算过时。而且其中一个网卡还支持AMT远程管理，远程修改BIOS，安装操作系统都没问题。所以不管是软路由，迷你服务器亦或者是跑个macOS都很适合。再加上当时200出头的售价，不要太吸引人。不过到了现在2021年，这块主板小黄鱼居然还能买的400多甚至600，妥妥的智商税。这块主板已经在角落默默服务了多年，陪我搬了几趟家换了几个城市，依旧一点问题都没有，不愧是Intel的原厂出品。感慨Intel都不再出主板了，如今把它掏出来，一是给他换个机箱改善散热，二是感觉他皮实，用它当小白鼠也不算心疼😏。       </p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-11-bad3f58b139fadee1d766ab4bc61f223.jpeg"></p><p>      接下来就是华硕的Q170T，可以理解为高配版的H110T，同样是双网卡、不同的是Q170T支持2280长度的NVME固态，而且速度是满速的PCI-e x4的速度，而不是阉割的x2速度。而且Q170芯片组支持Intel vPro技术，使用支持vPro的CPU可以实现类似于dq77kb的AMT远程管理。不过确定就是比较稀有，咸鱼刷了大半年有幸400蹲到一块。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-16-P_setting_xxx_0_90_end_692.webp"></p><h2 id="装机细节"><a href="#装机细节" class="headerlink" title="装机细节"></a>装机细节</h2><p>      这次选用了4010和4020两种风扇，下图展示的是4020风扇。原风扇的电线长度不够，自己更换了这种很便宜的超软红色硅胶线，26awg足量的话可以过3.5A的电流，妥妥的够用了。风扇通过螺丝固定在风扇架上。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-21-IMG_2196.webp"></p><p>      固定风扇用的是下图的这种夹板倒边螺母，用m3的规格，圆柱的外径是4mm。而4cm风扇的固定孔正好是4mm，这种螺母刚刚好可以放进风扇的固定孔，不会晃动。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-25-IMG_2328.webp"></p><p>      另一段用m3平头螺丝固定，风扇支架预留了位置，螺丝刚好可以沉进去不会突出。还可以看到风扇支架预留了理线槽，风扇的线可以统一从这里穿过去。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-40-IMG_2193.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-43-IMG_2197.webp"></p><p>      接下来安装机箱的开关，因为不会画pcb板，所以用这种最笨的方式拔开关固定在3D打印的开关板上，再用导线接起来就好了，毕竟开机只是个短接的动作，没什么要求。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-53-IMG_2199.webp"></p><p>      开关板预留按钮元件的孔位，可以很稳的固定在上面，元件一边的针脚穿过开关板，用来固定元件。另一边的针脚用来焊接电线。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-46-56-IMG_2203.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-47-00-IMG_2206.webp"></p><p>      然后就可以装在前面板了</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-47-04-IMG_2208.webp"></p><p>      接下来固定主板，用4个8mm的m3铜柱。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-47-08-IMG_2215.webp"></p><p>      主板上提前安装好散热器，跟原版一样用的超微SNK-P0046P散热器。咸鱼拆机20一个不包邮，最低的时候我见过15不包。不过这个散热高度有点不足，会把主板拉变形。如果用魔改u会更明显。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-47-11-IMG_2217.webp"></p><p>      主板支架预留的沉头螺丝孔也刚好。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-47-16-IMG_2218.webp"></p><p>      接下来是安装主板的挡板，开孔试验过很多次，灰常很精准👌。如果觉得丑可以自己打印一个挡板装上去，一体感更强。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-50-51-IMG_2219.webp"></p><p>      拼装前先把小屏幕安装在机箱前面板上，同时链接好USB线。如果主板的USB接口位置比较刚刚，也需要先插好。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-51-20-IMG_2222%20%E6%8B%B7%E8%B4%9D.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-51-53-IMG_2224.webp"></p><p>      然后就可以把三个部件连接起来</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-12-IMG_2221.webp"></p><p>      再插上风扇。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-19-IMG_2225.webp"></p><p>      顶部面板装好风扇调速器，接好风扇再装上。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-27-IMG_2228.webp"></p><p>      装好顶部面板的效果，可以看到4020风扇还是有点荣誉的位置，可以再装个厚一点的4028。不过要论美观还是4010好看。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-36-IMG_2230.webp"></p><p>      后面板的两个洞是用来固定硬盘的，可以上一个9.5mm厚度的2.5寸硬盘。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-44-IMG_2231.webp"></p><p>      再装上两片10块的亚克力侧板就完成了</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-51-IMG_2233.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-53-56-IMG_2234.webp"></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-54-25-IMG_2236%20%E6%8B%B7%E8%B4%9D.webp"></p><p>      最后再拧上支架。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-54-30-IMG_2237.webp"></p><p>      最后看看效果，很做作的买了4个芳生螺丝。家里猫多，而且这个机子其实我已经跑了一段时间，有点落灰，看起来脏脏的，各位看官见谅。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-54-51-IMG_2241%20%E6%8B%B7%E8%B4%9D.webp"></p><p>      Q170T主板装的黑色版本，来个黑白双煞。PLA材质颜色很多，机箱颜色可以任君组合。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/2021/12/17-15-55-05-IMG_2321%20%E6%8B%B7%E8%B4%9D.webp"></p><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ol><li><p>目前测试下来，4个0.8w的4010风扇是压不住这块QNCT处理器的，烤鸡会导致降频。一个是0.8w的4010的风扇风量不够，二是感觉这块风扇调速版输出电压会低不少（估计有1.5V）。好处是声音一点都没有，坏处就是即便调到最大功率，风扇也无法满速，风量完全不足。那4块4020的1.6w风扇的倒是能压住i5-3475s的烤鸡，明显风量大很多，热量呼呼的往外吹。感觉要用4010风扇的话需要选择更大功率的版本。</p></li><li><p>关于PLA材质耐热的问题，目前测试是没问题的。因为热源并不会直接接触到PLA材质，长时间的烤鸡也不至于达到PLA软化的温度。相比起耐热的问题，PLA的寿命问题更严重，几年之后PLA应该就脆得一捏就碎了。不过问题都很好解决，更换成ABS材料或者PETG材料就可以了。</p></li><li><p>Q170T用魔改U就是浪费了，因为会导致Vpro功能无法使用。不过垃圾佬买不起，关于Vpro的远程控制只能下次一定了。</p></li><li><p>图纸还是有很多提升的空间，所以暂时不考虑开源。主要是没想到更好的分享方式，虽然并不打算卖图纸，也担心被拿去打印卖钱，So……</p></li></ol>]]></content>
    
    
    <summary type="html">许久前在CHH看到赵总设计的这款机箱后，就深深中毒了。奈何这片文章发表与2015年，且据闻这个机箱的产量极少，意味着想拥有一台几乎不可能了。...</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="thin itx" scheme="https://road-tech.github.io/hexo/tags/thin-itx/"/>
    
    <category term="MK1" scheme="https://road-tech.github.io/hexo/tags/MK1/"/>
    
    <category term="Home Server" scheme="https://road-tech.github.io/hexo/tags/Home-Server/"/>
    
    <category term="3D打印" scheme="https://road-tech.github.io/hexo/tags/3D%E6%89%93%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>1L小主机系列 - HP 800G1</title>
    <link href="https://road-tech.github.io/hexo/Hackintosh_HP-800G1_I7-4770hq_OC/"/>
    <id>https://road-tech.github.io/hexo/Hackintosh_HP-800G1_I7-4770hq_OC/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-04-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BB两句"><a href="#BB两句" class="headerlink" title="BB两句"></a>BB两句</h2><p>HP 800G1 DM，在Haswell时代的1L小主机里是很有特色的存在，虽然比起同平台的联想（M73、M93）、戴尔（3020M，9020M）等的1L小主机丑了不少（PS.这个800G1看起来真的满满的年代感，很显旧），但是他很独特的选用了M.2接口而不是miniPCI。 而且相比起其他选用了M.2接口的小主机，他的M.2接口支持NVME协议（魔改后），而不是SATA协议。 虽然这个NVME协议速度并没有达到X4满速率，但是速度也比msata协议快不少。同时支持2280长度让硬盘的选择也很自由。 无线网卡的接口也是M.2且空间很充裕，可以轻松的通过转接卡用上白果的拆机网卡，不需要注入驱动就可以在macOS下实现隔空投送、接力、手表解锁等。 最后通过往BIOS注入微码可以使用如4980hq、4770hq等移动端魔改U，这类魔改u的4代i7，4c8t的配置，放在当时400左右的价格，性能并不会比同价位的6-8代的CPU（i3 8100之类）相差太多。 虽然4代CPU用的都是22nm工艺，会比14nm+++的工艺热不少，但是这类魔改u普遍搭载的是iris 5200核显，不仅黑苹果可以较完美的驱动，且性能要比祖传UHD630好不少（iris5200核显拥有40EU和128m的L4缓存，hd630仅24EU）。  综合以上数点，在当时（购入与2019年底）看来，不论是入坑macOS还是windows日常办公，这都是一个台很好玩且有性价比的小主机。</p><p>当然，放到现在已经是毫无性价比了。这台HP 800G1 DM我在19年底购入要360，4770hq魔改要420。而当时最便6代小主机要500+，最有性价比的ql2x好像也要480？（记不清楚了），所以在当时选择800G1还是有性价比的。到现在800G在tb还是这个价格，加上4代魔改i7全网没货，只剩下咸鱼传家宝开价500+。比起现在6代小主机比这个4代的800g1还便宜，而且还有神奇的6c12t的魔改8850H，只要450原。让这个800G1已经没有性价比了。没办法，谁叫我懒呢，折腾到现在才搞好macOS的安装。</p><p>总结一下，这台机子硬件方面的优势是：</p><ol><li>可以使用四代魔改移动的 CPU，比较低的价格就可以上 i7 八核（曾经）；</li><li>支持NVME协议、 2280长度的M.2硬盘；</li><li>同时还支持2.5寸Sata硬盘，总计可以安装两块硬盘；</li><li>网卡使用 ngff 接口且空间充裕，可以搭配转接卡使用用上白果的拆机网卡，完美驱动；</li><li>硬件保有量比较大，不用担心被JS涨价（曾经）；</li><li>噪音意外的小；</li></ol><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><table><thead><tr><th></th><th align="center">Specifications / 型号</th><th align="center">Note / 备注</th></tr></thead><tbody><tr><td>Motherboard/主板:</td><td align="center">HP 800 G1</td><td align="center"></td></tr><tr><td>CPU/处理器:</td><td align="center">I7-4770hq</td><td align="center"></td></tr><tr><td>CPU Cooler/散热器:</td><td align="center">自带</td><td align="center"></td></tr><tr><td>Hard Drive/硬盘:</td><td align="center">Toshiba RD500 256gb</td><td align="center"></td></tr><tr><td>RAM/内存:</td><td align="center">xiede 8G DDR3L 1600MHz X2</td><td align="center"></td></tr><tr><td>Wireless Card/无线网卡:</td><td align="center">BCM94360CS2</td><td align="center">苹果拆机卡</td></tr><tr><td>Tower Case/机箱:</td><td align="center">自带</td><td align="center"></td></tr><tr><td>Power/电源:</td><td align="center">7.4/5.5mm 19v 90w DC power adapter</td><td align="center"></td></tr></tbody></table><h2 id="EFI下载地址"><a href="#EFI下载地址" class="headerlink" title="EFI下载地址"></a>EFI下载地址</h2><p>跳转至Github  <a href="https://github.com/Road-tech/Hackintosh_HP-800G1_I7-4770hq_OC">下载地址</a></p><p><strong>使用EFI前请务必修改三码(SSN,UUID,ROM)</strong><br><strong>Please change three system codes (SSN,UUID,ROM) before using this EFI</strong>   </p><h2 id="macOS完善情况"><a href="#macOS完善情况" class="headerlink" title="macOS完善情况"></a>macOS完善情况</h2><h3 id="支持："><a href="#支持：" class="headerlink" title="支持："></a>支持：</h3><ul><li>两个DP接口输出(1080p)  </li><li>所有的USB接口  </li><li>Wi-Fi &amp; Bluetooth  </li><li>3.5mm音频接口</li><li>机箱内置音响</li><li>Airdrop  </li><li>AirPlay  </li><li>Continuity  </li><li>睡眠</li><li>CPU变频</li></ul><h3 id="不支持"><a href="#不支持" class="headerlink" title="不支持:"></a>不支持:</h3><ul><li>VGA接口</li></ul><h3 id="未测试"><a href="#未测试" class="headerlink" title="未测试:"></a>未测试:</h3><ul><li>4k 输出</li><li>3.5mm麦克风输入 </li></ul><h2 id="BIOS设定："><a href="#BIOS设定：" class="headerlink" title="BIOS设定："></a>BIOS设定：</h2><ul><li>Security -&gt; VTd -&gt; Disabled。 </li><li>Storage -&gt; Storage Options -&gt; SATA Emulation &gt; AHCI   </li></ul><h2 id="禁用CFG-Lock-amp-设定DVMT-pre-alloc到64M"><a href="#禁用CFG-Lock-amp-设定DVMT-pre-alloc到64M" class="headerlink" title="禁用CFG Lock &amp; 设定DVMT pre-alloc到64M"></a>禁用CFG Lock &amp; 设定DVMT pre-alloc到64M</h2><p>需要一定动手能力，请参考<a href="https://www.bilibili.com/read/cv4646116/">不刷BIOS修改AMI BIOS的方法（以CFG Lock为例）</a></p><h2 id="Performance-展示"><a href="#Performance-展示" class="headerlink" title="Performance/展示"></a>Performance/展示</h2><p>待上传</p><h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference/参考"></a>Reference/参考</h2><ul><li><a href="https://github.com/shidongfei2/800g1">https://github.com/shidongfei2/800g1</a></li><li><a href="https://github.com/zearp/OptiHack">https://github.com/zearp/OptiHack</a></li><li><a href="https://github.com/mingcheng/dell-optiplex-9020m-hackintosh">https://github.com/mingcheng/dell-optiplex-9020m-hackintosh</a></li><li><a href="https://www.bilibili.com/read/cv4646116/">https://www.bilibili.com/read/cv4646116/</a></li></ul>]]></content>
    
    
    <summary type="html">买了很久的小主机，之前尝试使用安装苹果系统，OC引导一直不成功，只能使用Clover引导，最近在GitHub上发现有大佬分享了800G1的OC引导，就拿来尝试了下...</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
    <category term="1L小主机" scheme="https://road-tech.github.io/hexo/tags/1L%E5%B0%8F%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="4770hq" scheme="https://road-tech.github.io/hexo/tags/4770hq/"/>
    
    <category term="HP 800G1" scheme="https://road-tech.github.io/hexo/tags/HP-800G1/"/>
    
  </entry>
  
  <entry>
    <title>DIY Mac mini后续 - CPU更换至QNVH</title>
    <link href="https://road-tech.github.io/hexo/Hackintosh-AsusH110T-QNVH-I7-8850H-DW1820A-OC/"/>
    <id>https://road-tech.github.io/hexo/Hackintosh-AsusH110T-QNVH-I7-8850H-DW1820A-OC/</id>
    <published>2021-04-18T16:00:00.000Z</published>
    <updated>2021-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BB两句"><a href="#BB两句" class="headerlink" title="BB两句"></a>BB两句</h2><p>之前Diy的一台Mac mini，用的是H110T+QN8J的组合，但是奈何技术有限，一直不能完美的支持16线程。后来把QN8J卖掉了，这台mini又收藏了起来，OC引导便一直没有更新了。突然又想起来这个坑，与心不甘，还是想再试试，奈何那么就过去了，QN8J还要850+。感觉很不值，于是买了这个QNVH。其实更多人应该听说过QNCT，就是8850H这个u的魔改。奈何Mr.Su家的QNCT卖完了，另外一家的8850H似乎挑内存，上不了高频，于是在海鲜市场买了这个QNVH，商家说类似于QNCT，看了看CPU频率一样，也不挑内存，380一颗还便宜，于是就选择了这个U。没想到刷上卖家给的BIOS，重新配置了下最新的OC0.6.8，就直接进系统了，超线程直接开启，完美支持8核16线程。有过之前配置的经验，这次EFI的制作很轻松！</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/018.webp" alt="Diy Mac mini"> </p><h2 id="Hardware-硬件"><a href="#Hardware-硬件" class="headerlink" title="Hardware/硬件"></a>Hardware/硬件</h2><table><thead><tr><th></th><th align="center">Specifications / 型号</th><th align="center">Note / 备注</th></tr></thead><tbody><tr><td>Motherboard/主板:</td><td align="center">Asus H110T</td><td align="center">Thin ITX</td></tr><tr><td>CPU/处理器:</td><td align="center">QNVH</td><td align="center">I7 8850h ES</td></tr><tr><td>CPU Cooler/散热器:</td><td align="center">Nimitz Diy Mac Mini 3D-printing cooling kit</td><td align="center"><a href="https://m.tb.cn/h.VSRHxNg?sm=8e19ac">Nimitz 超盒 3D打印散热套件</a></td></tr><tr><td>Hard Drive/硬盘:</td><td align="center">Customization SSD using SM2263XT and 512g Intel TLC NAND Flash</td><td align="center"><a href="https://m.tb.cn/h.VSA0n4u?sm=086db2">NVME 固态套料 主控板2263XT</a></td></tr><tr><td>RAM/内存:</td><td align="center">SEIWHALE 16G DDR4 2666MHz X2</td><td align="center"><a href="https://item.taobao.com/item.htm?id=612747898988">枭鲸 16G DDR4 2666 笔记本电脑内存条</a></td></tr><tr><td>Wireless Card/无线网卡:</td><td align="center">BCM94350ZAE</td><td align="center">DW1820A</td></tr><tr><td>Tower Case/机箱:</td><td align="center">Mac mini teardown case拆机机箱</td><td align="center">Mac mini 拆机机箱</td></tr><tr><td>Power/电源:</td><td align="center">Dell 74/50mm 19v 130w DC power adapter</td><td align="center"></td></tr></tbody></table><h2 id="EFI下载地址"><a href="#EFI下载地址" class="headerlink" title="EFI下载地址"></a>EFI下载地址</h2><p>跳转至Github  <a href="https://github.com/Road-tech/Hackintosh-AsusH110T-QNVH-I7-8850H-DW1820A-OC/">下载地址</a></p><p><strong>使用EFI前请务必修改三码(SSN,UUID,ROM)</strong><br><strong>Please change three system codes (SSN,UUID,ROM) before using this EFI</strong>   </p><h2 id="macOS完善情况"><a href="#macOS完善情况" class="headerlink" title="macOS完善情况"></a>macOS完善情况</h2><h3 id="支持："><a href="#支持：" class="headerlink" title="支持："></a>支持：</h3><ul><li>HDMI port (1080p) ｜ HDMI接口</li><li>DP port (1080p) ｜ DP接口</li><li>Audio output on HDMI ｜ HDMI接口音频输出</li><li>All USB ports ｜ 所有USB接口</li><li>Wi-Fi &amp; Bluetooth ｜ Wi-Fi &amp; 蓝牙</li><li>Dual Network Interface Card ｜ 双千兆</li><li>3.5mm Audio Output &amp; Mic Input ｜ 3.5mm音频输出</li><li>Airdrop ｜ 隔空投送</li><li>AirPlay ｜ 投屏</li><li>Continuity ｜ 接力   </li><li>hyper-threading ｜ 超线程</li><li>已加载原生电源管理</li><li>CPU变频</li><li>HEVC硬解码</li></ul><h3 id="未测试"><a href="#未测试" class="headerlink" title="未测试:"></a>未测试:</h3><ul><li>Sleep ｜ 睡眠</li><li>4k display ｜ 4K输出  （我没有4K屏）</li></ul><h2 id="备份MAC地址"><a href="#备份MAC地址" class="headerlink" title="备份MAC地址:"></a>备份MAC地址:</h2><p>华硕H110T这块主板有两张网卡：</p><ul><li>Realtek® RTL8111H  </li><li>Intel® I219V  </li></ul><p>华硕把Intel网卡的MAC地址写在了BIOS里面，但是在为了支持8代CPU去魔改BIOS之后，会丢失Intel网卡的MAC地址。 具体表现为Intel网卡的MAC地址会变成<code>88:88:87:88</code>，所以要先备份MAC地址。</p><p>有两个方法去查MAC地址：</p><ul><li>主板的内存槽上贴着MAC地址，Intel网卡通常是左边那个</li><li>Windows下用 <code>ipconfig</code> 或者 macOS/Linux下用 <code>ifconfig</code>去查MAC地址</li></ul><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/100.webp" alt="image">  </p><h2 id="刷入魔改BIOS"><a href="#刷入魔改BIOS" class="headerlink" title="刷入魔改BIOS"></a>刷入魔改BIOS</h2><p>BIOS在上图左下角红框的位置，拔下来刷入。<br><strong>建议使用编程器刷入BIOS！</strong></p><p>当然你也可以尝试软刷bios，具体教程和BIOS文件都打包在<a href="https://github.com/Road-tech/Hackintosh-AsusH110T-QNVH-I7-8850H-DW1820A-OC/raw/main/H110T-ASUS-4212.zip">H110T-ASUS-4212.zip</a></p><h2 id="恢复MAC地址"><a href="#恢复MAC地址" class="headerlink" title="恢复MAC地址"></a>恢复MAC地址</h2><p>请准备以下工具：</p><ul><li>任意容量的U盘      </li><li>Rufus          <a href="https://rufus.ie/zh_CN.html">下载地址</a>     </li><li>EEUPDATE     <a href="https://raw.githubusercontent.com/Road-tech/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/master/Eeupdate.rar">下载地址</a>    </li></ul><p>恢复MAC地址流程：</p><ol><li>打开Rufus，格式化U盘，制作DOS启动盘。</li><li>解压并复制EEUPDATA文件到U盘（假设EEUPDATA放在MAC文件夹内）。</li><li>U盘插入机子，进入BIOS设定U盘启动，进入DOS系统。</li><li>输入 <code>dir</code> 查看文件。</li><li>输入  <code>cd MAC</code> 进去MAC文件夹。</li><li>输入  <code>eeupdate /nic=1 /mac=XXXXXXXXX</code> 恢复MAC地址，<code>XXXXXXXXX</code>为你的记录的MAC地址。</li><li>提示成功后重启，进任意操作系统查看网卡MAC地址是否恢复成功。</li></ol><h2 id="BIOS设定："><a href="#BIOS设定：" class="headerlink" title="BIOS设定："></a>BIOS设定：</h2><h3 id="Disable-禁用："><a href="#Disable-禁用：" class="headerlink" title="Disable/禁用："></a>Disable/禁用：</h3><ul><li>Fast Boot  </li><li>CFG Lock   </li><li>VT-d  </li><li>CSM  </li><li>Intel SGX  </li></ul><h3 id="Enable-启用："><a href="#Enable-启用：" class="headerlink" title="Enable/启用："></a>Enable/启用：</h3><ul><li>Intel Virtualization Technology   </li><li>Above 4G decoding  </li><li>Hyper Threading </li><li>Serial Port </li></ul><h2 id="安装macos"><a href="#安装macos" class="headerlink" title="安装macos"></a>安装macos</h2><p>请准备以下工具：</p><ul><li>系统镜像：请自备 macOS Big Sur 11.2.3 安装镜像   </li><li>OC编辑工具：OpenCore Configurator <a href="https://mackie100projects.altervista.org/">下载地址</a>    </li><li>镜像写入工具：Etcher （Windows，macOS，Linux皆可运行） <a href="https://www.balena.io/etcher/">下载地址</a>    </li><li>我提供的OC引导的EFI：<a href="https://github.com/Road-tech/Hackintosh-AsusH110T-QNVH-I7-8850H-DW1820A-OC/releases/download/v1.0/EFI.zip">下载地址</a>    </li><li>准备一个大于10g的u盘    </li></ul><p>安装过程我就不重复了，大家可以参考下<a href="https://post.smzdm.com/p/adwrg48d/">我之前的文章</a>。</p><p>安装完成后请记得模拟NVRAM：<br>请在安装完系统后将增加 <strong>LogoutHook</strong> 文件用于放置在任意位置。并且在终端输入：<br> <code>sudo defaults write com.apple.loginwindow LogoutHook /path/to/LogoutHook.command</code></p><p>比如你放在<strong>下载</strong>文件夹内：<br><code>sudo defaults write com.apple.loginwindow LogoutHook /Users/xjn/Documents/LogoutHook/LogoutHook.command</code></p><p>重启后，你会在/EFI/下看到nvram.plist，代表已经成功模拟了。</p><p><strong>！运行后不要删除补丁包 ！</strong></p><h2 id="More-Detail-安装细节"><a href="#More-Detail-安装细节" class="headerlink" title="More Detail/安装细节"></a>More Detail/安装细节</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/001.webp" alt="image"><br>全家福<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/002.webp" alt="image"><br>QN8J，35w，6核12线程，1.6GHz默频<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/003.webp" alt="image"><br>屏蔽+短接<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/004.webp" alt="image"><br>硬件合体，不知道枭鲸知不知道他家的内存贴纸贴反了<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/005.webp" alt="image"><br>请出尼米兹散热器<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/006.webp" alt="image"><br>将弹簧放在风道主体，然后把纯铜散热器压上去<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/007.webp" alt="image"><br>把散热背板放在主板后面，然后把风道主体压上去，最后上螺丝拧紧。<br>这一步超级反人类！假象一下，弹簧并不能固定在主体上，散热器也不能，你要把它倒扣在主板上还要保证主体-弹簧-散热之间不能移位。最后你还要确保主体的螺丝孔能够对得上散热器的背板。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/008.webp" alt="image"><br>这个安装反人类到我不想装第二次！ 所以请尽量保证机子可以正常开机后再进行装机。<br><strong>请务必注意四颗螺丝的受力尽量均匀且不会过紧，不然可能会压弯主板！</strong><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/009.webp" alt="image"><br>装上后IO板之后就可以推进机箱了！同时别忘了接上Wi-Fi天线。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/010.webp" alt="image"><br>成功合体！推入过程不会太顺畅的，要按压一下，刚刚能推进去。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/011.webp" alt="image"><br>最后装上风扇，这里可以看到3d打印的纹路，很粗糙<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/012.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/013.webp" alt="image"><br>接下来就是重量嘉宾，大佬设计打印的网孔底盖！<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/014.webp" alt="image"><br>还是很精致漂亮的<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/015.webp" alt="image"><br>完美装上，严丝合缝<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/016.webp" alt="image"><br>换个角度<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/017.webp" alt="image"><br>装上小辣椒天线<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/018.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/019.webp" alt="image"> </p><h2 id="Performance-系统展示"><a href="#Performance-系统展示" class="headerlink" title="Performance/系统展示"></a>Performance/系统展示</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/102.webp" alt="image"> </p><h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference/参考"></a>Reference/参考</h2><p><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁 </a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a> - <a href="https://blog.xjn819.com/">XJN</a> </p><p><a href="https://blog.xjn819.com/?p=7">Asrock deskmini 310-com hackintosh 10.14-10.15 EFI</a> - <a href="https://blog.xjn819.com/">XJN</a></p><p><a href="https://blog.daliansky.net/DW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html">DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p><p><a href="http://www.smxdiy.com/thread-1862-1-1.html">华硕 ASUS H110T 支持 8 代 9 代 Xeon BIOS</a> - <a href="http://www.smxdiy.com/space-uid-1196.html">D大</a></p>]]></content>
    
    
    <summary type="html">之前Diy的一台Mac mini，用的是H110T+QN8J的组合，后来把QN8J卖掉了，便再也没更新过。没想到过了那么久，QN8J还是那么贵，于是乎选择了更有性价比的选择：QNVH</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
    <category term="Diy Mac mini" scheme="https://road-tech.github.io/hexo/tags/Diy-Mac-mini/"/>
    
    <category term="QNVH" scheme="https://road-tech.github.io/hexo/tags/QNVH/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll配置记录</title>
    <link href="https://road-tech.github.io/hexo/JekyllConfigurationRecord/"/>
    <id>https://road-tech.github.io/hexo/JekyllConfigurationRecord/</id>
    <published>2021-03-02T16:00:00.000Z</published>
    <updated>2021-03-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在记录Jekyll配置的全过程</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="要求环境"><a href="#要求环境" class="headerlink" title="要求环境"></a>要求环境</h2><ul><li>NodeJS  </li><li>Ruby (2.4.0或者更高)  </li><li>RubyGems    </li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>首先安装 NodeJS ，由于NodeJS版本较多，考虑到版本切换和配置复杂，这里先安装NodeJS版本管理器<a href="https://github.com/nvm-sh/nvm">NVM</a>。</p><ol><li><p>下载并运行脚本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>添加环境：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure></li><li><p>重新载入环境</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>验证安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -v nvm</span><br></pre></td></tr></table></figure></li></ol><p>然后再安装NodeJS</p><ol><li><p>安裝最新版的 Node.js</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure></li><li><p>或者安装指定版本的 Node.js</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install 6.14.4 # 安装Node 6.14.4版本</span><br></pre></td></tr></table></figure></li><li><p>测试 Node.js</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><ol><li><p>安装 Ruby (RubyGem集成在Ruby内)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ruby-full build-essential zlib1g-dev</span><br></pre></td></tr></table></figure></li><li><p>配置 RubyGem 安装路径（避免以root用户安装）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;# Install Ruby Gems to ~/gems&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;export GEM_HOME=&quot;$HOME/gems&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;export PATH=&quot;$HOME/gems/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>重新载入环境</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p>至此 Jekyll 依赖的环境配置完毕。</p><h3 id="安装Jekyll"><a href="#安装Jekyll" class="headerlink" title="安装Jekyll"></a>安装Jekyll</h3><ol><li><p>安装 Jekyll 和 bundler <a href="https://jekyllrb.com/docs/ruby-101/#gems">gems</a>.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gem install jekyll bundler</span><br></pre></td></tr></table></figure></li><li><p>测试 Jekyll</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll help</span><br></pre></td></tr></table></figure></li></ol><p>至此 Jekyll 安装完成。</p><h2 id="新建一个Jekyll网页"><a href="#新建一个Jekyll网页" class="headerlink" title="新建一个Jekyll网页"></a>新建一个Jekyll网页</h2><ol><li><p>建立一个新的 Jekyll 网页，并且保存在目录<code>./myblog</code>下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll new myblog</span><br></pre></td></tr></table></figure></li><li><p>进入目录<code>./myblog</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd myblog</span><br></pre></td></tr></table></figure></li><li><p>编译网页并且创建一个本地网页服务器用于测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bundle exec jekyll serve</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中输入<code>http://服务器IP:4000</code>就可以预览页面   </p></li></ol><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>首先要了解 Jekyll 网站的目录结构，具体的的配置信息请参考<a href="https://www.jekyll.com.cn/docs/structure/">https://www.jekyll.com.cn/docs/structure/</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml       #配置文件，用于配置网站的各种参数</span><br><span class="line">├── _data             #存放格式化的站点数据应</span><br><span class="line">|   └── members.yml</span><br><span class="line">├── _drafts           #草稿箱</span><br><span class="line">|   ├── begin-with-the-crazy-ideas.md</span><br><span class="line">|   └── on-simplicity-in-technology.md</span><br><span class="line">├── _includes         #可以存放一些用来复用的内容</span><br><span class="line">|   ├── footer.html</span><br><span class="line">|   └── header.html</span><br><span class="line">├── _layouts          #存放网站的模版文件</span><br><span class="line">|   ├── default.html</span><br><span class="line">|   └── post.html</span><br><span class="line">├── _posts            #存放已发布的文章</span><br><span class="line">|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md</span><br><span class="line">|   └── 2009-04-26-barcamp-boston-4-roundup.md</span><br><span class="line">├── _sass</span><br><span class="line">|   ├── _base.scss</span><br><span class="line">|   └── _layout.scss</span><br><span class="line">├── _site             #存放编译后的站点文件</span><br><span class="line">├── .jekyll-metadata</span><br><span class="line">└── index.html        # 主页</span><br></pre></td></tr></table></figure><p>如果你像我一样懒，不太想去研究HTML、CSS、JS之类的，我们大可直接下载个模版来修改，只要注明引用出处就好了。这里我借用了<a href="https://huangxuan.me/">黄玄大佬</a>的模版<a href="https://github.com/Huxpro/huxpro.github.io/">https://github.com/Huxpro/huxpro.github.io/</a> 。</p><p>我们把他的模版Clone下来，然后去修改<code>_config.yml</code>内的各种参数就可以使用了。附上我自己的<code>_config.yml</code>供参考。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Site settings</span></span><br><span class="line">title: Road&#x27;s Blog</span><br><span class="line">SEOTitle: Road&#x27;s Blog | 生活日常：好物、装机、diy、黑苹果、mini主机 | 这里是 @大马路叫Road 的个人博客，与你一起发现更大的世界。</span><br><span class="line">header-img: img/home-bg.jpg</span><br><span class="line">email: malu@road001.cn</span><br><span class="line">description: &quot;生活日常：好物、装机、diy、黑苹果、mini主机 | 这里是 @大马路叫Road 的个人博客，与你一起发现更大的世界。&quot;</span><br><span class="line">keyword: &quot;马路, @大马路叫Road, Road‘s Blog, 博客, 个人网站, 好物, 装机, diy, 黑苹果, mini主机, Hackintosh, macOS&quot;</span><br><span class="line">url: &quot;https://blog.malu.tech&quot;              # your host, for absolute URL</span><br><span class="line">baseurl: &quot;&quot;                             # for example, &#x27;/blog&#x27; if your blog hosted on &#x27;host/blog&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Publish posts or collection documents with a future <span class="built_in">date</span>.</span></span><br><span class="line">future: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SNS settings</span></span><br><span class="line">RSS: false</span><br><span class="line">weibo_username:     superlulula</span><br><span class="line">zhihu_username:     ma-lu-58</span><br><span class="line">github_username:    Road-tech</span><br><span class="line">facebook_username:  malu.tech</span><br><span class="line">linkedin_username:  路-马-8ab580116</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Build settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from 2016, <span class="string">&#x27;pygments&#x27;</span> is unsupported on GitHub Pages. Use <span class="string">&#x27;rouge&#x27;</span> <span class="keyword">for</span> highlighting instead.</span></span><br><span class="line">highlighter: rouge</span><br><span class="line">permalink: pretty</span><br><span class="line">paginate: 10</span><br><span class="line">exclude: [&quot;less&quot;,&quot;node_modules&quot;,&quot;Gruntfile.js&quot;,&quot;package.json&quot;,&quot;README.md&quot;,&quot;README.zh.md&quot;]</span><br><span class="line">anchorjs: true                          # if you want to customize anchor. check out line:181 of `post.html`</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you have timezone issue (e.g. <span class="comment">#68) in China, uncomment to use this:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">timezone: CN</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Gems</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from PR#40, to support <span class="built_in">local</span> preview <span class="keyword">for</span> Jekyll 3.0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make sure you have this gem installed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`$ gem install jekyll-paginate`</span></span><br><span class="line">plugins: </span><br><span class="line">  - jekyll-paginate</span><br><span class="line">  - jekyll-sitemap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Markdown settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">replace redcarpet to kramdown,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">although redcarpet can auto highlight code, the lack of header-id make the catalog impossible, so I switch to kramdown</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">document: http://jekyllrb.com/docs/configuration/#kramdown</span></span><br><span class="line">markdown: kramdown</span><br><span class="line">kramdown:</span><br><span class="line">  input: GFM                            # use Github Flavored Markdown !important</span><br><span class="line">  syntax_highlighter_opts:</span><br><span class="line">    span:</span><br><span class="line">      line_numbers: false</span><br><span class="line">    block:</span><br><span class="line">      line_numbers: true</span><br><span class="line">      start_line: 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Disqus settings</span></span><br><span class="line">disqus_username: blog-malu-tech</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Netease settings</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">netease_comment: <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Analytics settings</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Baidu Analytics</span> </span><br><span class="line">ba_track_id: </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Google Analytics</span></span><br><span class="line">ga_track_id: &#x27;&#x27;            # Format: UA-xxxxxx-xx</span><br><span class="line">ga_domain: malu.tech</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sidebar settings</span></span><br><span class="line">sidebar: true                           # whether or not using Sidebar.</span><br><span class="line">sidebar-about-description: &quot;喵喵喵？&lt;br&gt;Miao？&quot;     # For the next quantum leap&lt;br&gt;离开世界之前，一切都是过程&quot;</span><br><span class="line">sidebar-avatar: /img/100.png      # use absolute URL, seeing it&#x27;s used in both `/` and `/about/`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Featured Tags</span></span><br><span class="line">featured-tags: true                     # whether or not using Feature-Tags</span><br><span class="line">featured-condition-size: 1              # A tag will be featured if the size of it is more than this condition value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Progressive Web Apps</span></span><br><span class="line">chrome-tab-theme-color: &quot;#000000&quot;</span><br><span class="line">service-worker: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MathJax rendering <span class="keyword">for</span> layout:page (e.g. post preview)</span></span><br><span class="line">page-mathjax: false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Friends</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">friends: [</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    <span class="comment">#     title: &quot;Su&quot;,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    <span class="comment">#     href: &quot;http://su.gallery/&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    <span class="comment"># &#125;,&#123;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        title: <span class="string">&quot;乱序&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        href: <span class="string">&quot;http://mida.re/&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;,&#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        title: <span class="string">&quot;Sherry Wu&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">        href: <span class="string">&quot;https://xuechundesign.github.io&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">    &#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">]</span></span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果是直接套用大佬们的模版，那常用的插件一般都会集成了。但是如果想要安装额外的插件，如我想安装<code>jekyll-sitemap</code>来方便Google来抓取我的网页：（安装的方法有很多种，这里介绍一种）</p><ol><li><p>在 <code>Gemfile</code>里添加<code>gem &#39;jekyll-sitemap&#39;</code> </p></li><li><p>编辑<code>_config.yml</code>文件，在<code>plugins:</code>项目里添加插件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">_config.yml</span></span><br><span class="line">plugins: </span><br><span class="line">  - jekyll-paginate</span><br><span class="line">  - jekyll-sitemap   #新添加的插件</span><br></pre></td></tr></table></figure></li><li><p>然后执行<code>bundle install</code>即可完成安装。</p></li></ol><h2 id="编写博文"><a href="#编写博文" class="headerlink" title="编写博文"></a>编写博文</h2><p>上文可知<code>_posts</code>目录下面是存放发布的文章的，Jekyll对格式有两个要求：</p><ol><li><p>文章的文件名需要按照<code>YEAR-MONTH-DAY-title.md</code>进行命名。</p></li><li><p>文字开头必须包含<code>YAML</code>信息块。在<code>YAML</code>信息块要包含layout，标题，副标题，日期等信息。部分插件也需要在这里进行设置，如一些公式插件。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout:     post                                       # 使用的布局（不需要改）</span><br><span class="line">title:      懒人升级！自动判断上下班+导航+放歌            # 标题 </span><br><span class="line">subtitle:   捷径(快捷指令)简易教程                      # 副标题</span><br><span class="line">date:       2020-12-20                                 # 时间</span><br><span class="line">author:     Road                                     # 作者</span><br><span class="line">header-img: img/iOSOneButtonNavigation&amp;play-05.JPG    # 这篇文章标题背景图片</span><br><span class="line">catalog: true                                         # 是否归档</span><br><span class="line">tags:                                                # 标签</span><br><span class="line"><span class="bullet">    -</span> 捷径</span><br><span class="line"><span class="bullet">    -</span> 快捷指令</span><br><span class="line"><span class="bullet">    -</span> 一键导航</span><br><span class="line"><span class="bullet">    -</span> CarPlay</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h2 id="运行网站"><a href="#运行网站" class="headerlink" title="运行网站"></a>运行网站</h2><p>其实Jekyll最佳的归宿就应该是部署到Github Pages，因为Jekyll最初的开发者就是Github的创始人，而且很多Jekyll的开发者也是GitHub的员工，所以我们能看到Jekyll宛如GitHub的亲儿子般的存在。Jekyll部署到Github Pages支持自动生成页面，也就是可以把整个源码推送上去让Github来生成，可以说是又便宜又好用了。</p><p>但是因为各种原因(墙、HTTPS、百度爬不到等)我并不想放在GitHub上，而是希望放在自己的小服务器上。然而不少的教程会告诉你用官方的<code>server</code>指令，然后绑定一下端口域名就好了，也就是：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll serve  </span><br></pre></td></tr></table></figure><p>或者是简写：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll s</span><br></pre></td></tr></table></figure><p>甚至还有教你添加更多选项的，如端口<code>-p --port</code>、后台运行<code>-B --detach</code>、检测到代码变动自动编译网页<code>-w --watch</code>, 如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll s -p 80 --detach --watch</span><br></pre></td></tr></table></figure><p>更多的配置选项可以参考<a href="https://jekyllrb.com/docs/configuration/options/">Configuration Options | Jekyll • Simple, blog-aware, static sites</a></p><p>当然事实上 <code>--watch</code>不能与<code>--detach</code>共用，会提示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Auto-regeneration: disabled when running server detached.</span><br></pre></td></tr></table></figure><p>也会有大佬给出解决方案，可以参考<a href="https://helloworldkb.com/6623314/jekyll%E6%9C%8D%E5%8A%A1%22-watch%E2%80%9D%E4%B8%8D%E8%83%BD%E4%B8%8E%22-detach%E2%80%9D%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8">https://helloworldkb.com/6623314/jekyll服务%22-watch”不能与%22-detach”结合使用</a></p><p>可是我认为直接用官方的内置的web服务器来当正式上线的服务器是不妥的，毕竟这个内置的web服务器只是用来本地测试的(虽然我讲不出哪里不妥)。所以我认为更好的做法应该是把编译出来的文件交给专业的web服务器托管（如Apache、 Nginx 、IIS）。</p><h1 id="记录一些指令"><a href="#记录一些指令" class="headerlink" title="记录一些指令"></a>记录一些指令</h1><p><strong>初期用自带的测试web服务器发布网页时用的网页，不推荐使用！</strong></p><ul><li><p>可以使用命令将网站生成到目标文件夹：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jekyll build --destination &lt;destination&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=&gt; 当前文件夹中的内容将会生成到目标文件夹&lt;destination&gt;中。</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务器：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bundle exec jekyll serve --host 0.0.0.0 --port 80 --detach </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后台启动测试服务器，端口设置为80</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setsid jekyll serve --host 0 --watch --force_polling &amp;&gt;/dev/null &lt;/dev/null &amp;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后台启动测试服务器，并且发现变动时自动更新（不稳定，服务很容易）</span></span><br></pre></td></tr></table></figure></li><li><p>停止服务器 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pkill -f jekyll</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">本文记录Jekyll配置的全过程</summary>
    
    
    
    <category term="软件技巧" scheme="https://road-tech.github.io/hexo/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Jekyll" scheme="https://road-tech.github.io/hexo/tags/Jekyll/"/>
    
    <category term="Nginx" scheme="https://road-tech.github.io/hexo/tags/Nginx/"/>
    
    <category term="NodeJS" scheme="https://road-tech.github.io/hexo/tags/NodeJS/"/>
    
    <category term="Ruby" scheme="https://road-tech.github.io/hexo/tags/Ruby/"/>
    
    <category term="配置记录" scheme="https://road-tech.github.io/hexo/tags/%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>懒人升级！自动判断上下班+导航+放歌</title>
    <link href="https://road-tech.github.io/hexo/OnekeytoplayPlus/"/>
    <id>https://road-tech.github.io/hexo/OnekeytoplayPlus/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2020-12-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小声明"><a href="#小声明" class="headerlink" title="小声明"></a>小声明</h2><p>这依旧是个很简单的小教程，初衷只是为了方便生活。<br>So，如果你已经是捷径（快捷指令）大神，勿喷！<br>如有，也感谢大家提改进建议给我。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q：为什么你每天上下班还要导航？<br>A：我上下班每日通勤平均时间40min，不同的路径，不同的城市道路+高速组合，拥堵的时候差距可以多达20min。所以目前我很依赖导航。</p><p>Q：还是XX手机的XX助手更方便，轻轻松松就设置好了。<br>A：本文仅适用于iOS手机。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>之前已经写了一篇文章，介绍了如何设置上下班一键导航+放歌。配合NFC标签，可以做到一碰就开始导航，没有多余的操作了。</p><p>但是还是觉得不完美，毕竟上下班还是要单独点选一下；用NFC标签的话还要准备两张，还是不够懒人。</p><p>所以我们再优化一下，加入工作日和时间判断，再配合判断蓝牙或者Carplay的连接状态，做到点选都不用、更加懒人的效果。</p><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>大致的思路or流程如图：</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-1.webp" alt="image"></p><p>iOS的<strong>快捷指令</strong>里拥有一栏叫自动化，为我们预设了各种触发指令的场景。我会选择用<strong>连接CarPlay车载时</strong>或者<strong>蓝牙</strong>的触发场景。当手机自动连上车上的CarPlay或者中控的蓝牙时，去触发设定好的指令。</p><p>触发指令后，指令会去播放音乐，然后会去判断今日日期，如果是周末就退出。如果是工作日，就去判断是上班还是回家。</p><p>判断上班还是回家的方法有很多种，可以用判断回家的距离或者时常大于或者小于某些值来区分，也可以用判断当前时间是早上还是下午来区分。这里我选择相对简单的用时间判断上下午。</p><p>当判断出上班还是回家后，再跳转触发上篇文章教大家设定好的一键导航就好了。</p><h2 id="设置捷径指令"><a href="#设置捷径指令" class="headerlink" title="设置捷径指令"></a>设置捷径指令</h2><p>因为iOS的快捷指令的设置界面的逻辑其实并不清晰，所以我不打算将一整套流程都设置在一个快捷指令里，而是选用套娃的方式，某一条件判断好了，就跳到下一个对应的快捷指令中。</p><p>PS. 就是我们编程时写function的逻辑 - -｜</p><h3 id="设定一键导航"><a href="#设定一键导航" class="headerlink" title="设定一键导航"></a>设定一键导航</h3><p>这里就不重复了，有劳大家去上一篇文章去查看。</p><p>上一篇文章的链接：<a href="https://post.smzdm.com/p/ammq20rv/">iOS设置下班一键导航+放歌</a></p><p>这里我会创建两个一键导航的快捷指令，分别叫“上班”，“回家”。</p><h3 id="判断上班还是回家"><a href="#判断上班还是回家" class="headerlink" title="判断上班还是回家"></a>判断上班还是回家</h3><p>也就是整个流程的这一部分：<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-2.webp" alt="image"></p><p>这里我选择相对简单的用时间判断上下午。</p><p>因为快捷指令并没有提供现成的判断上下午的指令，所以换个思路，利用快捷指令的<strong>格式化</strong>功能。 将时间转为纯数字格式再比较数值大小，如将时间11:30转为纯数字的1130，然后比较数字大小；数字小于1200即为上午，大于1200即为下午。</p><p>查看Apple官方的快捷指令使用手册，找到关于<a href="https://support.apple.com/zh-cn/guide/shortcuts/apd8d9b19184/4.0/ios/14.0">自定日期格式</a>的内容，可以看到快捷指令采用了<a href="https://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns">Unicode Technical Standard #35</a>的格式标准。</p><p>|———————————–+—————————————|<br>|              模式                  |                 结果                     |<br>|:——————————:    |:————————————:    |<br>| yyyy.MM.dd G ‘at’ HH:mm:ss zzz     | 1996.07.10 AD at 15:08:56 PDT            |<br>| EEE, MMM d, ‘’yy                   | Wed, July 10, ‘96                        |<br>| h:mm a                             | 12:08 PM                                 |<br>| hh ‘o’’clock’ a, zzzz              | 12 o’clock PM, Pacific Daylight Time     |<br>| K:mm a, z                          | 0:00 PM, PST                             |<br>|———————————–+—————————————|</p><p>其中我们关注的小时就是字母H<br>HH代表的是24小时制的小时，hh代表的是12小时制的小时<br>mm代表的是分钟，个位数的时候补零。m则不补零。</p><p>这一部分的捷径可以设置为</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-3.webp" alt="image"></p><p>具体流程就是：</p><p>获取当前时间-&gt; 时间格式转为自定格式、HHmm-&gt; 用转换后的数字-1130-&gt; 条件判断、计算结果小于0则为上午，大于0则为下午-&gt; 跳转到对应的快捷指令“上班”or“下班”</p><p>1130对应就是11点30分，这个判断时间可以按照你的需求自己设定。</p><p>设定<strong>如果</strong>这个脚本的时候，判断条件可能无法设定为<strong>小于</strong>，而是只能设定为包含、有任何值等条件。需要将<strong>计算的结果</strong>从文本改变为数字，就可以设定为大于or小于了。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-4.webp" alt="image"></p><h3 id="判断工作日"><a href="#判断工作日" class="headerlink" title="判断工作日"></a>判断工作日</h3><p>也就是整个流程的这一部分：<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-5.webp" alt="image"></p><p>依旧是利用快捷指令的<strong>格式化</strong>功能。 将周几格式转为纯数字格式再比较数值区间，如将周二转为纯数字的2，然后比较得出2在范围1-5之间，则为工作日；否则即为周末。</p><p>查看<a href="https://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns">Unicode Technical Standard #35</a>的格式标准，星期的定义为：</p><p>|——    |——————    |———-    |——————————    |<br>| Sym.     | Field Patterns     | Examples     | Description                      |<br>|——    |—————-    |———-    |——————————    |<br>| E        | E..EEE             | Tue          | Abbreviated                      |<br>| 　       | EEEE               | Tuesday      | Wide                             |<br>| 　       | EEEEE              | T            | Narrow                           |<br>| 　       | EEEEEE             | Tu           | Short                            |<br>| e        | e                  | 2            | Numeric: 1 digit                 |<br>| 　       | ee                 | 2            | Numeric: 2 digits + zero pad     |<br>| 　       | eee                | Tue          | Abbreviated                      |<br>| 　       | eeee               | Tuesday      | Wide                             |<br>| 　       | eeeee              | T            | Narrow                           |<br>| 　       | eeeeee             | Tu           | Short                            |<br>| c        | c..cc              | 2            | Numeric: 1 digit                 |<br>| 　       | ccc                | Tue          | Abbreviated                      |<br>| 　       | cccc               | Tuesday      | Wide                             |<br>| 　       | ccccc              | T            | Narrow                           |<br>| 　       | cccccc             | Tu           | Short                            |<br>|——    |——————    |———-    |——————————    |</p><p>我们需要的就是<code>e</code>，即星期二输出<code>2</code>.</p><p>测试一下：<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-6.webp" alt="image"></p><p>可以看到虽然是星期一，但是输出的数字居然是2。这里应该是根据手机的地区设置，一周的开始是周日，所以周一到周五的数字范围就是2-6。大家要依据自己的实际情况做调整。</p><p>这一部分的捷径可以设置为</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-7.webp" alt="image"></p><p>具体流程就是：</p><p>获取当前时间-&gt; 时间格式转为自定格式、e-&gt; 数字大于等于2，是下一步，否则提示今天不上班-&gt; 数字小于等于6，是下一步，否则提示今天不上班-&gt; 跳转到对应的快捷指令“判断上下班”。</p><p>依旧要注意设定<strong>如果</strong>这个脚本的时候，需要将<strong>计算的结果</strong>从文本改变为数字，才可以设定为大于or小于。</p><h3 id="设定自动化场景"><a href="#设定自动化场景" class="headerlink" title="设定自动化场景"></a>设定自动化场景</h3><p>如图：</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-8.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-9.webp" alt="image"></p><p>具体流程就是：</p><p>手机连接到CarPlay-&gt; 播放网易云-&gt; 判断工作日</p><h3 id="附加内容"><a href="#附加内容" class="headerlink" title="附加内容"></a>附加内容</h3><p>其实目前为止的自动化场景也足够满足大多数情况了，但是如果小伙伴们有更高的要求，希望连法定节假日和补班也算上，那就继续看下面的附加内容吧。</p><p>为什么判断法定节假日和补班是附加内容呢？因为法定节假日和补班每年都不一样，这就需要每年至少要更新一次放假安排。为了方便–懒–，这个时候我们就要去依托别人的服务。这个时候就会有不稳定的因素产生了，别人提供的服务，或者因为网络因素，或者服务器的承受能力，或者经济原因。很有可能突然就因为各种原因就失效了，然后影响我们的捷径自动化判断。</p><p>当然，在了解完上述这些不稳定因素，你仍然认为这是可以接受并且想要更完善的体验，我推荐你几个思路：</p><ol><li>直接调用别人的节假日判断的API接口，如<code>http://timor.tech/api/holiday/info/2018-3-2</code> 具体API内容内容可以<a href="https://timor.tech/api/holiday/">参考这里</a>。这个方法优点是简单，直接传递日期过去，传回的信息连星期几，是否节假日都有了。缺点是开发者用爱发电，服务容易遭受攻击导致不稳定。</li><li>直接下载别人维护好，放在公共平台的假日列表，如gameboyLV的<a href="https://github.com/gameboyLV/ChineseHoliday/commits/master">ChineseHoliday项目</a>。优点是服务器相对稳定（文件存放在GitHub并且可以配合CDN保证网络访问质量），缺点是大佬可能哪年就不更新了。不过我看大佬从16年开始一直有更新到21年，还是很稳定的。实在不行我们可以fork过来自己更新嘛。</li><li>订阅公共日历，也就是别人维护的法定假期的公共日历。如<a href="https://zhuanlan.zhihu.com/p/136669675">这个地址</a>内提供的订阅日历，大家也可以自己找。优点依旧是服务器相对稳定（日历依托在iCloud），缺点依然是可能哪年就不更新了。</li></ol><p>加入节假日和补班日的判断后的大致的思路or流程如图：<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-10.webp" alt="image"></p><p>我这里演示方法二。</p><p>我先fork了的gameboyLV项目，然后release发布了一个1.0版方便蹭免费的CDN加速。</p><p>然后公众假日的链接为</p><p><code>https://cdn.jsdelivr.net/gh/Road-tech/ChineseHoliday@1.0/data/XXXX.txt</code></p><p>补假的链接为</p><p><code>https://cdn.jsdelivr.net/gh/Road-tech/ChineseHoliday@1.0/data/XXXX_w.txt</code></p><p>链接里<code>XXXX</code>代表当前年份。</p><p>举个例子关于节假日判断，也就是这部分：</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-11.webp" alt="image"></p><p>这一部分的捷径可以设置为</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/ShortcutGen2/ShortcutGen2-12.webp" alt="image"></p><p>判断打定工作日的具体流程就是：</p><p>获取当前日期-&gt; 日期格式转为两个格式化后的日期，MMdd和yyyy-&gt; 设定URL<code>https://c...1.0/data/[格式化后的日期yyyy].txt</code>-&gt; 获取URL内容-&gt; 如果URL内容里有[格式化后的日期MMdd]，也就是当前日期-&gt; 如果URL内容里含有当前日期就放假，否则上班</p><p>判断补假的流程类似，只是要将URL换成<code>https://c...1.0/data/[格式化后的日期yyyy]_w.txt</code></p>]]></content>
    
    
    <summary type="html">之前已经写了一篇文章，介绍了如何设置上下班一键导航+放歌。配合NFC标签，可以做到一碰就开始导航，没有多余的操作了。 但是还是觉得不完美，毕竟上下班还是要单独点选一下；用NFC标签的话还要准备两张，还是不够懒人。 所以我们再优化一下，加入工作日和时间判断，再配合判断蓝牙或者Carplay的连接状态，做到点选都不用、更加懒人的效果。 大致的思路or流程如图：</summary>
    
    
    
    <category term="软件技巧" scheme="https://road-tech.github.io/hexo/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="捷径" scheme="https://road-tech.github.io/hexo/tags/%E6%8D%B7%E5%BE%84/"/>
    
    <category term="快捷指令" scheme="https://road-tech.github.io/hexo/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"/>
    
    <category term="一键导航" scheme="https://road-tech.github.io/hexo/tags/%E4%B8%80%E9%94%AE%E5%AF%BC%E8%88%AA/"/>
    
    <category term="CarPlay" scheme="https://road-tech.github.io/hexo/tags/CarPlay/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://road-tech.github.io/hexo/hello-world/"/>
    <id>https://road-tech.github.io/hexo/hello-world/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2020-12-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>iOS设置下班一键导航+放歌</title>
    <link href="https://road-tech.github.io/hexo/Onekeytoplay/"/>
    <id>https://road-tech.github.io/hexo/Onekeytoplay/</id>
    <published>2020-11-30T16:00:00.000Z</published>
    <updated>2020-12-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小声明"><a href="#小声明" class="headerlink" title="小声明"></a>小声明</h2><p>这只是个很简单的小教程，初衷只是为了方便生活。<br>So，如果你已经是捷径（快捷指令）大神，轻喷。<br>如果能顺便提点改进建议给我就更好了。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在成为一枚社畜之后，每天必备的操作就是：</p><blockquote><p>上车 -&gt; 打开高德地图导航 -&gt; 打开网易云放歌 -&gt; 家or公司   </p></blockquote><p>虽然用时不久，但是上班<del>归家</del>心切，必定是操作步骤越少越好。<br>所以就用上iOS的捷径（快捷指令）。</p><h2 id="设置捷径指令"><a href="#设置捷径指令" class="headerlink" title="设置捷径指令"></a>设置捷径指令</h2><h3 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h3><ol><li>首先你需要在网易云音乐的设置里添加Siri捷径</li></ol><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-01.webp" alt="image"></p><ol start="2"><li>这样你才能能在<strong>快捷指令</strong>里找到有关网易云音乐的指令。</li></ol><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-02.webp" alt="image"></p><h3 id="获取高德地图跳转接口"><a href="#获取高德地图跳转接口" class="headerlink" title="获取高德地图跳转接口"></a>获取高德地图跳转接口</h3><p>我们去到高德地图的<a href="https://lbs.amap.com/api/amap-mobile/guide/ios/ios-uri-information">高德开放平台</a>，去查看iOS的URL调用说明。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-03.webp" alt="image"></p><p>然后我们能得到一个URL的范例：    </p><p><code>iosamap://navi?sourceApplication=applicationName&amp;poiname=fangheng &amp;poiid=BGVIS&amp;lat=36.547901 &amp;lon=104.258354&amp;dev=1&amp;style=2</code></p><p>！！方便排版留了空格，请自行删除所有空格！！</p><p>还有具体的参数说明：</p><p>|———————–+—————————————————————————————————|——-|<br>| 参数                    | 说明                                                                                                | 必填     |<br>|:———————:|:————————————————————————————————-:|:—-:    |<br>| navi                  | 服务类型                                                                                             | 是       |<br>| sourceApplication     | 第三方调用应用名称。如applicationName                                                                 | 是       |<br>| poiname               | POI名称                                                                                            | 否       |<br>| poiid                 | 对应sourceApplication 的POI ID                                                                     | 否       |<br>| lat                   | 纬度                                                                                                | 是       |<br>| lon                   | 经度                                                                                                | 是       |<br>| dev                   | 是否偏移(0:lat和lon是已经加密后的,不需要国测加密;1:需要国测加密)                                          | 是       |<br>| style                 | 导航方式（0 速度快；1 费用少；2路程短；3 不走高速；4 躲避拥堵；5 不走高速且避免收费；6 不走高速且躲避拥堵；7；躲避收费和拥堵；8 不走高速躲避收费和拥堵） *由于与用户本地设置冲突，iOS平台7.7.4版本起不支持该参数，偏好设置将以用户本地设置为准                                | 是      |<br>|———————–+—————————————————————————————————|——-|</p><p>可以看到我们主要需要关注三个参数</p><ul><li><strong>lat</strong>  纬度</li><li><strong>lon</strong>  经度</li><li><strong>POI</strong> POI名称</li></ul><p>POI名称可以理解为你自定义的目的地名称，比如说“家”，“公司”。</p><p>也就是说我们只要填好这个URL的经纬度，就能自动跳转到高德地图并导航好设定的坐标。</p><p>那接下来就要获取我们目的地的坐标了。</p><h3 id="获取目的地坐标"><a href="#获取目的地坐标" class="headerlink" title="获取目的地坐标"></a>获取目的地坐标</h3><p>这一步很简单，打开任一地图网页，比如我选择回高德的<a href="https://lbs.amap.com/console/show/picker">网页地图</a>。慢慢找到你的目的地，鼠标放上去就能获得。<br>比如我随便找的一家医院的某一入口。<br>因为是很精细的一个点，所以只要你愿意，你甚至能精确导航到你的停车位。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-04.webp" alt="image"></p><p>举个例子，我们要导航到经度113.29752，纬度为23.070164，并且目的地名称设置为家，那将参数填入URL范例将会得到：</p><p><code>iosamap://navi?sourceApplication=applicationName&amp;poiname=家 &amp;poiid=BGVIS&amp;lat=113.29752 &amp;lon=23.070164&amp;dev=1&amp;style=2</code></p><p>！！方便排版留了空格，请自行删除所有空格！！</p><h3 id="串联两个指令"><a href="#串联两个指令" class="headerlink" title="串联两个指令"></a>串联两个指令</h3><p>很简单就像图片这样逐一添加就好了。<br>高德导航的URL需要单独添加并且设定Safari打开url，还能顺遍添加一个拉高屏幕亮度和手机音量的设定更加方便。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-05.webp" alt="image"></p><p>最后将指令放到桌面或者桌面插件就可以一键运行了。</p><p>##结合NFC标签一碰导航</p><p>TB上买几个NFC标签， 我选的是<code>TAG213</code>，一个应该不到2块钱。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-06.webp" alt="image"></p><p>点选<code>创建个人自动化</code> -&gt; 点选<code>NFC</code> -&gt; 点选<code>扫描</code> -&gt; 手机扫描NFC标签 -&gt; 命名刚扫描的标签 -&gt; 点选<code>添加操作</code> -&gt; 选择<code>APP</code> -&gt; 选择<code>快捷指令</code> -&gt; 点选 <code>运行指令</code></p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-07.webp" alt="image"></p><p>再选择刚刚设置好的指令</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/iOSOneButtonNavigation&play/iOSOneButtonNavigation&play-08.webp" alt="image"></p><p>最后记得将<code>运行前询问</code>关掉，这样扫描标签后就可以直接开始导航，不用再确认一遍。</p><p>最后把标签贴在车上，上车一碰出发！</p>]]></content>
    
    
    <summary type="html">在成为一枚社畜之后，每天必备的操作就是： -&gt; 上车 -&gt; 打开高德地图导航 -&gt; 打开网易云放歌 -&gt; 家or公司    虽然用时不久，但是上班~~归家~~心切，必定是操作步骤越少越好。 所以就用上iOS的捷径（快捷指令）。 一个很简单的小教程，只为了方便生活。</summary>
    
    
    
    <category term="软件技巧" scheme="https://road-tech.github.io/hexo/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="捷径" scheme="https://road-tech.github.io/hexo/tags/%E6%8D%B7%E5%BE%84/"/>
    
    <category term="快捷指令" scheme="https://road-tech.github.io/hexo/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"/>
    
    <category term="一键导航" scheme="https://road-tech.github.io/hexo/tags/%E4%B8%80%E9%94%AE%E5%AF%BC%E8%88%AA/"/>
    
    <category term="CarPlay" scheme="https://road-tech.github.io/hexo/tags/CarPlay/"/>
    
  </entry>
  
  <entry>
    <title>终于等到你——DIY Mac mini &amp; Hackintosh</title>
    <link href="https://road-tech.github.io/hexo/DIYMacmini+Hackintosh/"/>
    <id>https://road-tech.github.io/hexo/DIYMacmini+Hackintosh/</id>
    <published>2020-05-05T16:00:00.000Z</published>
    <updated>2021-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BB两句"><a href="#BB两句" class="headerlink" title="BB两句"></a>BB两句</h2><p>说好的捋一捋2019捡的垃圾，结果1月底写完第一篇文章就一直没动静了。转眼间大半年过去了，我终于有点闲钱和时间来继续折腾。19年捡的一堆硬件：HP 800 G1 DM，华硕H110t，精英H110S2p，华硕H110S1。4款设备现在终于折腾到了第二款。</p><p>不得不说DIY一台Mac mini一直是我的梦想，奈何金钱和能力有限，太复杂太高端的方案一直不敢碰，唯有尼米兹的方案一直很对我胃口：不会太复杂，不粗糙好看。一直很口水上一代尼米兹的散热方案，适配的是华硕H81T。奈何但我发现这款方案的时候，那套尼米兹散热就已经停产了。</p><p>万万没想到又出了新的尼米兹的散热方案，可是当我收到了主板的时候，生产这套方案的厂家就因为搬家而停止了。然后就一直等，然后等到天气变冷了，这张3D打印的方案就因为容易卷边就一直搁置。然后就遇上了疫情。一等久等了大半年。在我都绝望准备放弃的时候，万万没想到又重新生产了。第一时间下单，然后又发现原本15块一个的冲压金属网孔底网居然卖完了。咸鱼居然有人开价150块收一个都收不到。一直到最近群里的大佬设计打印了网孔的散热底盖。至此，我才攒出这一台心仪的Diy mini。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/018.jpg" alt="Diy Mac mini"> </p><p>然后要感谢mac mini diy 交流群里的两位兄弟：<br>@梦的猴子-H110T+qn8j 他无情的充当了我的小白鼠，测试了大量的bios，还帮我完善了EFI。<br>@中二病不接受治疗 感谢大佬设计了Mac mini的散热底盖。</p><p>然后说一下华硕H110T这款主板：</p><p>支持2230/2242/2260长度的SSD，也就是说常用的2280长度的SSD是不能用的，不够位置。</p><p>基本没有2260长度的SSD，2230/2242的SSD性能很一般，一般都是中低端的方案。</p><p>但是不用担心，H110T这款主板的M.2插槽只支持X2的速度，用高端的方案也是浪费。</p><p>害得我辛辛苦苦找遍全网才找到的2242长度，支持X4速度的NVME SSD，显得毫无意义。</p><p>幸好这个diy的SSD用的只是2263XT的无缓低端方案，也跑不满x4。</p><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/000.jpg" alt="image"> </p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><table><thead><tr><th align="center"></th><th align="center">型号</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">主板</td><td align="center">Asus H110T</td><td align="center">Thin ITX</td></tr><tr><td align="center">处理器</td><td align="center">QN8J</td><td align="center">I7 8700T ES</td></tr><tr><td align="center">散热器</td><td align="center">Nimitz Diy Mac Mini 3D-printing cooling kit</td><td align="center">Nimitz 超盒 3D打印散热套件</td></tr><tr><td align="center">硬盘</td><td align="center">定制SSD 基于 SM2263XT 和 512g Intel TLC NAND Flash</td><td align="center">NVME 固态套料 主控板2263XT</td></tr><tr><td align="center">内存</td><td align="center">SEIWHALE 16G DDR4 2666MHz X2</td><td align="center">枭鲸 16G DDR4 2666 笔记本电脑内存条</td></tr><tr><td align="center">无线网卡</td><td align="center">BCM94350ZAE</td><td align="center">DW1820A</td></tr><tr><td align="center">机箱</td><td align="center">Mac mini teardown case拆机机箱</td><td align="center">Mac mini 拆机机箱</td></tr><tr><td align="center">电源</td><td align="center">Dell 74/50mm 19v 130w DC power adapter</td><td align="center">Dell 74/50mm 19v 130w DC power adapter</td></tr></tbody></table><h2 id="EFI下载地址"><a href="#EFI下载地址" class="headerlink" title="EFI下载地址"></a>EFI下载地址</h2><p>跳转至Github  <a href="https://github.com/Road-tech/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC">下载地址</a></p><p><strong>使用EFI前请务必修改三码(SSN,UUID,ROM)</strong><br><strong>Please change three system codes (SSN,UUID,ROM) before using this EFI</strong>   </p><h2 id="macOS完善情况"><a href="#macOS完善情况" class="headerlink" title="macOS完善情况"></a>macOS完善情况</h2><h3 id="支持："><a href="#支持：" class="headerlink" title="支持："></a>支持：</h3><ul><li>HDMI port (1080p) ｜ HDMI接口</li><li>DP port (1080p) ｜ DP接口</li><li>Audio output on HDMI ｜ HDMI接口音频输出</li><li>All USB ports ｜ 所有USB接口</li><li>Wi-Fi &amp; Bluetooth ｜ Wi-Fi &amp; 蓝牙</li><li>Dual Network Interface Card ｜ 双网口</li><li>3.5mm Audio Output &amp; Mic Input ｜ 3.5mm音频输出</li><li>Airdrop ｜ 隔空投送</li><li>AirPlay ｜ 投屏</li><li>Continuity ｜ 接力   </li></ul><h3 id="不支持"><a href="#不支持" class="headerlink" title="不支持:"></a>不支持:</h3><ul><li>hyper-threading ｜ 超线程</li></ul><h3 id="未测试"><a href="#未测试" class="headerlink" title="未测试:"></a>未测试:</h3><ul><li>Sleep ｜ 睡眠</li><li>4k display ｜ 4K输出  （我没有4K屏）</li></ul><h2 id="备份MAC地址"><a href="#备份MAC地址" class="headerlink" title="备份MAC地址:"></a>备份MAC地址:</h2><p>华硕H110T这块主板有两张网卡：</p><ul><li>Realtek® RTL8111H  </li><li>Intel® I219V  </li></ul><p>华硕把Intel网卡的MAC地址写在了BIOS里面，但是在为了支持8代CPU去魔改BIOS之后，会丢失Intel网卡的MAC地址。 具体表现为Intel网卡的MAC地址会变成<code>88:88:87:88</code>，所以要先备份MAC地址。</p><p>有两个方法去查MAC地址：</p><ul><li>主板的内存槽上贴着MAC地址，Intel网卡通常是左边那个</li><li>Windows下用 <code>ipconfig</code> 或者 macOS/Linux下用 <code>ifconfig</code>去查MAC地址</li></ul><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/100.jpg" alt="image">  </p><h2 id="刷入魔改BIOS"><a href="#刷入魔改BIOS" class="headerlink" title="刷入魔改BIOS"></a>刷入魔改BIOS</h2><p>BIOS在上图左下角红框的位置，拔下来刷入。<br><strong>必须用编程器刷入BIOS！</strong></p><p>我尝试了两个BIOS：</p><ol><li>我我现在在用的，6核以上无法打开超线程，6核以下如8100没有问题。能安装macOS，<a href="https://raw.githubusercontent.com/Road-tech/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/master/ASUSTeK_H110T_3805HT.bin">下载地址</a></li><li>D大修改的BIOS，可以打开超线程，但是无法安装macOS（我还在尝试修复），会报错 <code>ACPI Error: [\_SB_.PCi0.XHC_.RHUB.HS11] namespace lookup failure, AE_NOT_FOUND </code> 如果你不需要安装macOS，请直接使用这个。 <a href="http://www.smxdiy.com/thread-1862-1-1.html">下载链接</a></li></ol><p>D大的bios引导报错，我尝试打开了XCHI-hand off，没有效果。我也尝试修改DSDT屏蔽HS11，但是似乎没有效果，不知道是不是我操作有问题。</p><p>在这里请求各位大佬，能不能帮我修复下修复无法打开超线程的bug，我这里提取了两个bios下的DSDT，可以下载去比对一下看看能不能修复。<a href="https://github.com/Road00/Hackintosh-for-Asus-H110T-QN8J-I7-8700T-ES-DW1820A-using-Opencore-and-Support-macOS-Catalina">下载地址</a>       </p><p>或者教教我如何屏蔽整个RHUB，我定制了USB之后貌似用不到RHUB下的接口。</p><h2 id="恢复MAC地址"><a href="#恢复MAC地址" class="headerlink" title="恢复MAC地址"></a>恢复MAC地址</h2><p>请准备以下工具：</p><ul><li>任意容量的U盘      </li><li>Rufus          <a href="https://rufus.ie/zh_CN.html">下载地址</a>     </li><li>EEUPDATE     <a href="https://raw.githubusercontent.com/Road-tech/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/master/Eeupdate.rar">下载地址</a>    </li></ul><p>恢复MAC地址流程：</p><ol><li>打开Rufus，格式化U盘，制作DOS启动盘。</li><li>解压并复制EEUPDATA文件到U盘（假设EEUPDATA放在MAC文件夹内）。</li><li>U盘插入机子，进入BIOS设定U盘启动，进入DOS系统。</li><li>输入 <code>dir</code> 查看文件。</li><li>输入  <code>cd MAC</code> 进去MAC文件夹。</li><li>输入  <code>eeupdate /nic=1 /mac=XXXXXXXXX</code> 恢复MAC地址，<code>XXXXXXXXX</code>为你的记录的MAC地址。</li><li>提示成功后重启，进任意操作系统查看网卡MAC地址是否恢复成功。</li></ol><h2 id="BIOS设定："><a href="#BIOS设定：" class="headerlink" title="BIOS设定："></a>BIOS设定：</h2><h3 id="Disable-禁用："><a href="#Disable-禁用：" class="headerlink" title="Disable/禁用："></a>Disable/禁用：</h3><ul><li>Fast Boot  </li><li>CFG Lock   </li><li>VT-d  </li><li>CSM  </li><li>Intel SGX  </li></ul><h3 id="Enable-启用："><a href="#Enable-启用：" class="headerlink" title="Enable/启用："></a>Enable/启用：</h3><ul><li>Intel Virtualization Technology   </li><li>Above 4G decoding  </li><li>Hyper Threading </li><li>Serial Port </li></ul><h2 id="安装macos"><a href="#安装macos" class="headerlink" title="安装macos"></a>安装macos</h2><p>请准备以下工具：</p><ul><li>系统镜像：【Len’s DMG】macOS Catalina 10.15.2 19C57 With Clover 5100 and OC 0.5.2镜像 <a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1836586">下载地址</a>    </li><li>OC编辑工具：OpenCore Configurator <a href="https://mackie100projects.altervista.org/">下载地址</a>    </li><li>镜像写入工具：Etcher （Windows，macOS，Linux皆可运行） <a href="https://www.balena.io/etcher/">下载地址</a>    </li><li>我提供的OC引导的EFI：<a href="https://github.com/Road-tech/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC">下载地址</a>    </li><li>准备一个大于10g的u盘    </li></ul><p>安装过程我就不重复了，大家可以参考下<a href="https://post.smzdm.com/p/adwrg48d/">我之前的文章</a>。</p><p>安装完成后请记得模拟NVRAM：<br>请在安装完系统后将增加 <strong>LogoutHook</strong> 文件用于放置在任意位置。并且在终端输入：<br> <code>sudo defaults write com.apple.loginwindow LogoutHook /path/to/LogoutHook.command</code></p><p>比如你放在<strong>下载</strong>文件夹内：<br><code>sudo defaults write com.apple.loginwindow LogoutHook /Users/xjn/Documents/LogoutHook/LogoutHook.command</code></p><p>重启后，你会在/EFI/下看到nvram.plist，代表已经成功模拟了。</p><p><strong>！运行后不要删除补丁包 ！</strong></p><h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/001.jpg" alt="image"><br>全家福<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/002.jpg" alt="image"><br>QN8J，35w，6核12线程，1.6GHz默频<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/003.jpg" alt="image"><br>屏蔽+短接<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/004.jpg" alt="image"><br>硬件合体，不知道枭鲸知不知道他家的内存贴纸贴反了<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/005.jpg" alt="image"><br>请出尼米兹散热器<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/006.jpg" alt="image"><br>将弹簧放在风道主体，然后把纯铜散热器压上去<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/007.jpg" alt="image"><br>把散热背板放在主板后面，然后把风道主体压上去，最后上螺丝拧紧。<br>这一步超级反人类！假象一下，弹簧并不能固定在主体上，散热器也不能，你要把它倒扣在主板上还要保证主体-弹簧-散热之间不能移位。最后你还要确保主体的螺丝孔能够对得上散热器的背板。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/008.jpg" alt="image"><br>这个安装反人类到我不想装第二次！ 所以请尽量保证机子可以正常开机后再进行装机。<br><strong>请务必注意四颗螺丝的受力尽量均匀且不会过紧，不然可能会压弯主板！</strong><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/009.jpg" alt="image"><br>装上后IO板之后就可以推进机箱了！同时别忘了接上Wi-Fi天线。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/010.jpg" alt="image"><br>成功合体！推入过程不会太顺畅的，要按压一下，刚刚能推进去。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/011.jpg" alt="image"><br>最后装上风扇，这里可以看到3d打印的纹路，很粗糙<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/012.jpg" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/013.jpg" alt="image"><br>接下来就是重量嘉宾，大佬设计打印的网孔底盖！<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/014.jpg" alt="image"><br>还是很精致漂亮的<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/015.jpg" alt="image"><br>完美装上，严丝合缝<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/016.jpg" alt="image"><br>换个角度<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/017.jpg" alt="image"><br>装上小辣椒天线<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/018.jpg" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/019.jpg" alt="image"><br>成品展示<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh-AsusH110T-QN8J-I7-8700Tes-DW1820A-OC/102.webp" alt="image"> </p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁 </a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a> - <a href="https://blog.xjn819.com/">XJN</a> </p><p><a href="https://blog.xjn819.com/?p=7">Asrock deskmini 310-com hackintosh 10.14-10.15 EFI</a> - <a href="https://blog.xjn819.com/">XJN</a></p><p><a href="https://blog.daliansky.net/DW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html">DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p><p><a href="http://www.smxdiy.com/thread-1862-1-1.html">华硕 ASUS H110T 支持 8 代 9 代 Xeon BIOS</a> - <a href="http://www.smxdiy.com/space-uid-1196.html">D大</a></p>]]></content>
    
    
    <summary type="html">说好的捋一捋2019捡的垃圾，结果1月底写完第一篇文章就一直没动静了。转眼间大半年过去了，我终于有点闲钱和时间来继续折腾。19年捡的一堆硬件：HP 800 G1 DM，华硕H110t，精英H110S2p，华硕H110S1。4款设备现在终于折腾到了第二款diy Mac mini。
不得不说DIY一台Mac mini一直是我的梦想，奈何金钱和能力有限，太复杂太高端的方案一直不敢碰，唯有尼米兹的方案一直很对我胃口：不会太复杂，不粗糙好看。一直很口水上一代尼米兹的散热方案，适配的是华硕H81T。奈何但我发现这款方案的时候，那套尼米兹散热就已经停产了。
万万没想到又出了新的尼米兹的散热方案，可是当我收到了主板的时候，生产这套方案的厂家就因为搬家而停止了。然后就一直等，然后等到天气变冷了，这张3D打印的方案就因为容易卷边就一直搁置。然后就遇上了疫情。一等久等了大半年。在我都绝望准备放弃的时候，万万没想到又重新生产了。第一时间下单，然后又发现原本15块一个的冲压金属网孔底网居然卖完了。咸鱼居然有人开价150块收一个都收不到。一直到最近群里的大佬设计打印了网孔的散热底盖。至此，我才攒出这一台心仪的Diy mini。
然后要感谢mac mini diy 交流群里的两位兄弟：</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
    <category term="stx" scheme="https://road-tech.github.io/hexo/tags/stx/"/>
    
    <category term="Diy Mac mini" scheme="https://road-tech.github.io/hexo/tags/Diy-Mac-mini/"/>
    
  </entry>
  
  <entry>
    <title>一个优秀的男孩子，连小片片都是整齐的</title>
    <link href="https://road-tech.github.io/hexo/buildAV/"/>
    <id>https://road-tech.github.io/hexo/buildAV/</id>
    <published>2020-04-21T16:00:00.000Z</published>
    <updated>2020-04-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>每个寂寞难耐的夜晚，你是不是都会熟练的点开你的12T大别墅，去寻求小姐姐们的精神慰藉。<br>但是你又会不会被那么多年下来，被慢慢的12T文件夹劝退，找不到你最爱的那位小姐姐，没法补习你最薄弱的功课。<br>但是你又会不会默默的打开了P站，感慨P站的片片排序是那么美好，简单清晰明，让疲惫的你还想点进去认真学习。<br>接下来你又会不会鼓起勇气，想好好的清扫你的12T的大别墅。奈何户型太大，一天下来也没什么成果。<br>最后你又想，能不能像电影那样，能够自动刮削，帮你整理好封面墙，让你尽情挑选。</p><p>懂得！我们都懂的！大佬们也都懂得！大佬们也都帮你实现好了！</p><p>今天我们就用 Jellyfin + AV_Data_Capture !</p><p>为你整理大别墅，打造小片片电影墙！</p><p>做一个连小片片都是整齐的优秀Boy！</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>Jellyfin       <a href="https://jellyfin.org/">点击直达</a>   </li><li>AV_Data_Capture   <a href="https://github.com/yoshiko2/AV_Data_Capture">点击直达</a></li><li>你的12T硬盘</li></ul><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><ul><li>iPhone页面<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/IMG_9611.webp" alt="image"> </li><li>iPad页面<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/IMG_0012.webp" alt="image"> </li><li>电脑页面<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.27.26.webp" alt="image"> </li></ul><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ol><li><p>首先下载刮削软件AV_Data_Capture，我建议选择GUI版本，去release界面下载。<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.15.04.webp" alt="image"> </p></li><li><p>运行软件，点开设置：    </p><p>   模式：            刮削模式<br>   软连接模式：       关      （一般用于PT下载，不能破坏文件结构，创建软链接）<br>   调试模式：        开    （记录刮削日志，非常有用，用于查看失败原因）<br>   保存日志：        开    （把日志保存到文件，方便后期查询）<br>   失败后移动文件：  关     （个人建议关闭，否则会统一移动到一个文件夹，后期细整理很麻烦）</p></li><li><p>目录设置：</p><pre><code>目录设置：    改为你的大别墅的位置排除目录：    添加一下不愿意刮削的目录</code></pre><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.18.35.webp" alt="image"> </p></li><li><p>其他设置：</p><pre><code> 请尽量配合代理使用！</code></pre><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.18.56.webp" alt="image"> </p></li><li><p>开始刮削：  </p><p> 点击开始就可以等他开始刮削了，很快你就会看到刮削的信息和封面，<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.21.09.webp" alt="image"> </p><p> 点击日志能够获取更多信息<br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1.21.40.webp" alt="image"> </p></li><li><p>细整理：    </p><p> 刮削完毕后，开始我们的细整理，一般刮削的成功率还是很高的（只要车牌在，且没有很多乱七八糟的信息），我的整理完也就剩下10多个这样。这时候就需要我们去分析失败原因并且去修改了：</p><ul><li><p>教学视频<strong>重复</strong>： 像上图，日志提示 Existed！ 这时候你去比对已存在的视频，留个体积大画质好的吧。</p></li><li><p>名字不规范：日志提示无法获取信息，无法筛选出番号，这是我们按一定的规范重命名：</p><pre><code> 骑兵类的：SSNI-xxx \ ssni00xxx 步兵类的：xxxxxx-xxxx、xxxxxx_xxx、HEYZO-xxxx、nxxxx 路人系列：xxxLUXU-xxxx、LUXU-xxxx、FC2-xxxxxx、FC2-PPV-xxxxxx        </code></pre><p> 额外的命名规范：</p><pre><code> 自带中文字幕：ssni-xxx-c.mp4 多集影片： ssni-xxx-cd1.mp4、ssni-xxx-cd2.mp4、....... 多集、字幕顺序：分集在前，字幕在后，ssni-xxx-CD1-C.mp4 外挂字幕文件： 字幕文件名必须与影片文件名一致</code></pre></li></ul></li><li><p>再次刮削直到全部完成。  </p></li><li><p>安装Jellyfin，下载地址<a href="https://jellyfin.org/">点击直达</a></p></li><li><p>添加媒体库：</p><pre><code> 选择右上方：    显示高级设置 内容类型：    电影 显示名称：    教学视频 文件夹：    大别墅地址 首选下载语言：    留空 国家：    留空 优先使用内置的标题而不是文件名    不选 启用实时监控    看个人喜欢 Movie元数据下载器:    坚决不要开启任何下载器 自动从互联网获取元数据并刷新：    从不 媒体资料储存方式：    Nfo ！！！ 一定要勾选  Movie图片获取程序： 不需要开启 将媒体图像保存到媒体所在文件夹便编辑：    不选 提前下载图片：    不选 开启章节图像提取：    这个看个人喜好了 媒体库扫描过程中解压章节图像：    同上</code></pre><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/AV-tidy/1111.webp" alt="image"> </p></li><li><p>保存，扫描媒体库。等待一段时间就可以食用了</p></li></ol>]]></content>
    
    
    <summary type="html">每个寂寞难耐的夜晚，你是不是都会熟练的点开你的12T大别墅，去寻求小姐姐们的精神慰藉。    但是你又会不会被那么多年下来，被慢慢的12T文件夹劝退，找不到你最爱的那位小姐姐，没法补习你最薄弱的功课。    但是你又会不会默默的打开了P站，感慨P站的片片排序是那么美好，简单清晰明，让疲惫的你还想点进去认真学习。 接下来你又会不会鼓起勇气，想好好的清扫你的12T的大别墅。奈何户型太大，一天下来也没什么成果。 最后你又想，能不能像电影那样，能够自动刮削，帮你整理好封面墙，让你尽情挑选。
懂得！我们都懂的！大佬们也都懂得！大佬们也都帮你实现好了！
今天我们就用 Jellyfin + AV&#92;_Data&#92;_Capture ! 整理大别墅，打造小片片电影墙！</summary>
    
    
    
    <category term="软件技巧" scheme="https://road-tech.github.io/hexo/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="电影" scheme="https://road-tech.github.io/hexo/tags/%E7%94%B5%E5%BD%B1/"/>
    
    <category term="片库管理" scheme="https://road-tech.github.io/hexo/tags/%E7%89%87%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
    <category term="Jellyfin" scheme="https://road-tech.github.io/hexo/tags/Jellyfin/"/>
    
    <category term="AV_Data_Capture" scheme="https://road-tech.github.io/hexo/tags/AV-Data-Capture/"/>
    
  </entry>
  
  <entry>
    <title>华硕H110S1小主机QL2X换I3-8100</title>
    <link href="https://road-tech.github.io/hexo/ASUS_H110S1+QL2XtoI3-8100/"/>
    <id>https://road-tech.github.io/hexo/ASUS_H110S1+QL2XtoI3-8100/</id>
    <published>2020-04-16T16:00:00.000Z</published>
    <updated>2020-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><table><thead><tr><th></th><th>型号</th><th>备注</th></tr></thead><tbody><tr><td>主板</td><td>Asus H110s1</td><td>(mini STX)</td></tr><tr><td>处理器</td><td>i3-8100</td><td></td></tr><tr><td>散热器</td><td>NOCTUA NH-L9i</td><td></td></tr><tr><td>硬盘</td><td>Hikvision C2000pro 512gb</td><td></td></tr><tr><td>内存</td><td>JUHOR 16G DDR4 2666MHz X2</td><td></td></tr><tr><td>无线网卡</td><td>BCM94350ZAE</td><td>(DW1820A)</td></tr><tr><td>机箱</td><td>SilverStone VT02</td><td></td></tr><tr><td>电源</td><td>55/25mm 19v 120w DC power adapter</td><td>Dell 74/50mm 19v 130w DC power adapter</td></tr></tbody></table><h2 id="EFI下载地址"><a href="#EFI下载地址" class="headerlink" title="EFI下载地址"></a>EFI下载地址</h2><p>跳转至Github  <a href="https://github.com/Road-tech/Hackintosh_Asus-H110s1_I3-8100_DW1820A_OC">下载地址</a></p><p><strong>使用EFI前请务必修改三码(SSN,UUID,ROM)</strong><br><strong>Please change three system codes (SSN,UUID,ROM) before using this EFI</strong>  </p><h2 id="macOS完善情况"><a href="#macOS完善情况" class="headerlink" title="macOS完善情况"></a>macOS完善情况</h2><h3 id="支持："><a href="#支持：" class="headerlink" title="支持："></a>支持：</h3><ul><li>All HDMI ports (1080p)  </li><li>DP port (1080p)  </li><li>Audio output on HDMI  </li><li>All USB ports  </li><li>Wi-Fi &amp; Bluetooth  </li><li>3.5mm Audio Output &amp; Mic Input</li><li>Airdrop  </li><li>AirPlay  </li><li>Continuity  </li></ul><h3 id="不支持"><a href="#不支持" class="headerlink" title="不支持:"></a>不支持:</h3><ul><li>Sleep  </li></ul><h3 id="未测试"><a href="#未测试" class="headerlink" title="未测试:"></a>未测试:</h3><ul><li>4k display  </li></ul><h2 id="BIOS设定："><a href="#BIOS设定：" class="headerlink" title="BIOS设定："></a>BIOS设定：</h2><h3 id="Disable-禁用："><a href="#Disable-禁用：" class="headerlink" title="Disable/禁用："></a>Disable/禁用：</h3><ul><li>Fast Boot  </li><li>CFG Lock   </li><li>VT-d  </li><li>CSM  </li><li>Intel SGX  </li></ul><h3 id="Enable-启用："><a href="#Enable-启用：" class="headerlink" title="Enable/启用："></a>Enable/启用：</h3><ul><li>VT-x  </li><li>Above 4G decoding  </li><li>Hyper Threading  </li></ul><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="2020-04-17-更新："><a href="#2020-04-17-更新：" class="headerlink" title="2020-04-17 更新："></a>2020-04-17 更新：</h4><ul><li>Update LiLu to 1.4.3    </li><li>Update Whatevergreen to 1.3.9     </li><li>Update AppleALC to 1.4.8     </li><li>Update CPUFriend to 1.2.0    </li><li>Update NVMeFix to 1.0.2</li><li>Update VirtualSMC to 1.1.2</li></ul><h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/8CB768EC-7D4C-49EA-9FDE-12661C0B0B63_1_105_c.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-02-18%E4%B8%8B%E5%8D%886.58.19.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.58.51.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.54.32.webp" alt="image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁 </a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a> - <a href="https://blog.xjn819.com/">XJN</a> </p><p><a href="https://blog.xjn819.com/?p=7">Asrock deskmini 310-com hackintosh 10.14-10.15 EFI</a> - <a href="https://blog.xjn819.com/">XJN</a></p><p><a href="http://bbs.pcbeta.com/viewthread-1801615-1-1.html">分享EFI 华硕H110S1 STX主板 i3-8100 UHD630</a> - <a href="http://i.pcbeta.com/space-uid-3336274.html">mike20080924</a></p><p><a href="https://blog.daliansky.net/DW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html">DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p>]]></content>
    
    
    <summary type="html">之前组装的华硕H110S1 STX小主机,为了追求性价比上了QL2X。但是QL2X的黑苹果终归是的不完美，技术有限，最终还是忍痛加钱，把CPU从QL2X更换至I3-8100，然后更新下黑苹果的EFI。多说一句，QL2X还是适合跑在Windows或者Ubuntu这类系统下。这种魔改U不限制倍频，最适合的玩法还是拿去超频，炸了也不心疼那种。至于macOS下，黑苹果需要魔改太多，紫屏问题网上有的修复方案都没有效果，动手能力有限的同学还是慎入吧。</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="STX" scheme="https://road-tech.github.io/hexo/tags/STX/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
    <category term="8100" scheme="https://road-tech.github.io/hexo/tags/8100/"/>
    
  </entry>
  
  <entry>
    <title>捋一捋2019捡的垃圾：华硕H110S1+QL2X+黑苹果(OC+Catalina)</title>
    <link href="https://road-tech.github.io/hexo/ASUS_H110S1+QL2X+hackintosh(OC+Catalina)/"/>
    <id>https://road-tech.github.io/hexo/ASUS_H110S1+QL2X+hackintosh(OC+Catalina)/</id>
    <published>2020-01-26T16:00:00.000Z</published>
    <updated>2020-03-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BB两句"><a href="#BB两句" class="headerlink" title="BB两句"></a>BB两句</h2><p>19年底几位大佬掀起了一波1L小主机的热潮，作为一名沉迷捡垃圾多年的垃圾佬，再加上不爱打游戏，喜欢小主机多年，这股热潮自然也是不会错过的。19年捡了不少二手硬件：HP 800 G1 DM，华硕H110t，精英H110S2p，还有今天的主角——华硕H110S1。过年宅在家不能出门，也正好捋一捋自己捡的一堆硬件。把机子装起来，写文章记录一下。</p><p>下面来讲讲这些硬件的故事：</p><p>主板和机箱是逛闲鱼无意刷到的，因为之前虽然也想装stx主机，但是我已经收到了一块精英H110s2p了。但是感觉卖家价格挺合理的，单买机箱也要200了，那算下来主板400。虽然没有很便宜，但是考虑到这类stx主板很小众，也没砍价就直接下单了。</p><p>散热器是看卖家的拍的照片，发现用的是这个猫头鹰散热，问他愿不愿意搭车卖，卖家很爽快，加100就好了。愉快下单捋一捋2019捡的垃圾：华硕H110S1+QL2X+黑苹果（OC+Catalina）</p><p>内存，玖合，16g单条279很便宜了，虽然大家都知道颗粒的来源。但是内存嘛，又不超频，而且jd自营，便宜大碗，真香。</p><p>硬盘，C2000 pro 512g 听闻固态要涨价才赶紧囤的，不是什么好价。后悔没上699 1tr的车。</p><p>网卡，D1820A，原价50左右的卡，自从黑果小兵说可以用之后就一直被炒，到现在要80了，js啊捋一捋2019捡的垃圾：华硕H110S1+QL2X+黑苹果（OC+Catalina） 。这张无线卡其实水很深，尤其是笔记本，但是主机平台感觉还好。选这张卡主要是因为便宜，而且如果上拆机卡的话要用转接板，stx主板这种布局我怕会顶到ssd，就没用了。（但是其实我有看到有人是能用了装接板+拆机卡后还能放下ssd的，不清楚，带测试）</p><p>电源，卖家附赠的90w电源，虽然说目前用在没什么问题，其实不太够。看说明书90w电源只能带35w的u，而QL2X是45w的u。我怀疑我装系统的时候出现鼠标键盘不灵敏之类的情况很有可能是供电不足。待测试，以后换一个。</p><p>CPU，当时选CPU主要是基于一个原则，集显要是630的，感觉跑黑果会比较方便。当时看上了几款：</p><ul><li><p>8100，4c4t，45w，价格650左右；</p></li><li><p>QL2X，4c8t，45w，价格500；</p></li><li><p>QN8J(8700T es)，6c12t，35w，850左右；</p></li></ul><p>8100性价比太低了，QN8J有点超预算，最后就选了QL2X，</p><p>其实都怪intel挤牙膏，cpu更新了那么多代，旧的cpu价格一点都没掉，甚至弄到4代u价格也高得不合理。</p><p>AMD yes！</p><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><table><thead><tr><th></th><th>型号</th><th>备注</th></tr></thead><tbody><tr><td>主板</td><td>Asus H110s1</td><td>(mini STX)</td></tr><tr><td>处理器</td><td>QL2X</td><td>(7820HK modify from BGA to LGA)</td></tr><tr><td>散热器</td><td>NOCTUA NH-L9i</td><td></td></tr><tr><td>硬盘</td><td>Hikvision C2000pro 512gb</td><td></td></tr><tr><td>内存</td><td>JUHOR 16G DDR4 2666MHz X2</td><td></td></tr><tr><td>无线网卡</td><td>BCM94350ZAE</td><td>(DW1820A)</td></tr><tr><td>机箱</td><td>SilverStone VT02</td><td></td></tr><tr><td>电源</td><td>55/25mm 19v 120w DC power adapter</td><td>Dell 74/50mm 19v 130w DC power adapter</td></tr></tbody></table><h2 id="EFI下载地址"><a href="#EFI下载地址" class="headerlink" title="EFI下载地址"></a>EFI下载地址</h2><p>跳转至Github  <a href="https://github.com/Road-tech/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC">下载地址</a></p><p><strong>使用EFI前请务必修改三码(SSN,UUID,ROM)</strong><br><strong>Please change three system codes (SSN,UUID,ROM) before using this EFI</strong>  </p><h2 id="macOS完善情况"><a href="#macOS完善情况" class="headerlink" title="macOS完善情况"></a>macOS完善情况</h2><h3 id="支持："><a href="#支持：" class="headerlink" title="支持："></a>支持：</h3><ul><li>1080p display support one HDMI port (close to DP port)  </li><li>Audio output on HDMI  </li><li>All USB ports  </li><li>Wi-Fi &amp; Bluetooth  </li><li>3.5mm Audio Output &amp; Mic Input</li><li>Airdrop  </li><li>AirPlay  </li><li>Continuity  </li></ul><h3 id="不支持"><a href="#不支持" class="headerlink" title="不支持:"></a>不支持:</h3><ul><li>Sleep  </li></ul><h3 id="未测试"><a href="#未测试" class="headerlink" title="未测试:"></a>未测试:</h3><ul><li>DP port  </li><li>4k display  </li></ul><h2 id="BIOS设定："><a href="#BIOS设定：" class="headerlink" title="BIOS设定："></a>BIOS设定：</h2><h3 id="Disable-禁用："><a href="#Disable-禁用：" class="headerlink" title="Disable/禁用："></a>Disable/禁用：</h3><ul><li>Fast Boot  </li><li>CFG Lock   </li><li>VT-d  </li><li>CSM  </li><li>Intel SGX  </li></ul><h3 id="Enable-启用："><a href="#Enable-启用：" class="headerlink" title="Enable/启用："></a>Enable/启用：</h3><ul><li>VT-x  </li><li>Above 4G decoding  </li><li>Hyper Threading  </li></ul><h2 id="关于QL2X的更多细节"><a href="#关于QL2X的更多细节" class="headerlink" title="关于QL2X的更多细节"></a>关于QL2X的更多细节</h2><p>QL2X 是 7820HK 的ES版本CPU， 核显为HD630。 7820HK是个笔记本平台的CPU，大佬通过魔改接口让它可以工作在桌面平台。这很自然会带来一些问题在黑苹果的时候。</p><p>首先，7820HK 曾经被用在 Macbook pro 14,3 (15 inch,2017) 平台上。</p><p>为了驱动这块 QL2X 的核显，我尝试了3个ig-platform-id：  </p><ul><li>0x19120000 (skylake平台 核显为HD530  原生驱动3个DP接口)  </li><li>0x59120000 (kabylake 平台 核显为HD630 原生驱动3个DP接口, 用于iMac18,2)  </li><li>0x591b0000 (kabylake 平台 核显为HD630 原生驱动 1个LVDS接口 和 2个DP接口, 用于MacBookPro14,3)    </li></ul><p>对应了3个结果：</p><ul><li>0x19120000: 主板上的3个接口 (1 DP, 2 HDMI) 都正常工作，但是<strong>不支持HEVC硬解</strong></li><li>0x59120000: 主板上的2个接口 (2 HDMI) 都工作, 可是2个HDMI接口输出都有问题(紫屏)。不过<strong>支持HEVC硬解</strong></li><li>0x591b0000: 主板上的1个接口(1 HDMI 靠近DP那个) 工作正常, 剩下那个HDMI接口无输出。<strong>支持HEVC硬解</strong></li></ul><p><strong>另外很重要的是：</strong></p><p>为了让QL2X可以在桌面平台上使用，我们需要关闭BIOS中的ME。这会导致macOS系统无法在睡眠后唤醒显卡。导致这套系统无法睡眠。</p><p>同时，因为 BIOS 中的 ME 被关掉了, 我们需要在 <code>boot-arg</code> 中添加 <code>-disablegfxfirmware</code> </p><p>我以后会尝试解决这些问题。</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="2020-05-10-更新："><a href="#2020-05-10-更新：" class="headerlink" title="2020-05-10 更新："></a>2020-05-10 更新：</h4><p>很抱歉这是我最后一次为这个配置更新EFI，因为我已经改用i3-8100. <a href="https://github.com/Road-tech/Hackintosh_Asus-H110s1_I3-8100_DW1820A_OC">点击跳转</a>        </p><p>但是我还是找到了一些解决紫屏的方法，如果你想把 ig-platform-id 设置为<code>0x59120000</code>:</p><ol><li>尝试用Hackintosh注入显示器</li><li>尝试设置强制RBG模式</li></ol><p><em>参考链接:</em></p><ul><li><a href="https://blog.driftking.tw/2018/10/MacOS%E5%BC%B7%E5%88%B6%E5%A4%96%E6%8E%A5%E8%9E%A2%E5%B9%95%E8%BC%B8%E5%87%BARGB/">MacOS強制外接螢幕輸出RGB</a></li><li><a href="https://www.mathewinkson.com/2013/03/force-rgb-mode-in-mac-os-x-to-fix-the-picture-quality-of-an-external-monitor">Force RGB mode in Mac OS X to fix the picture quality of an external monitor</a></li><li><a href="https://embdev.net/topic/284710">Dell U2713H on Mac: forcing RGB mode instead of YCbCr</a></li></ul><h4 id="2020-04-17-更新："><a href="#2020-04-17-更新：" class="headerlink" title="2020-04-17 更新："></a>2020-04-17 更新：</h4><ul><li>Update LiLu to 1.4.3    </li><li>Update Whatevergreen to 1.3.9     </li><li>Update AppleALC to 1.4.8     </li><li>Update CPUFriend to 1.2.0    </li><li>Update NVMeFix to 1.0.2</li><li>Update VirtualSMC to 1.1.2</li></ul><hr><h4 id="2020-04-01-更新："><a href="#2020-04-01-更新：" class="headerlink" title="2020-04-01 更新："></a>2020-04-01 更新：</h4><ul><li>Already support to Catalina 10.15.4    </li><li>Update Whatevergreen to 1.3.8-DEBUG-t3 (Fix HDMI bug)     </li><li>Update Opencore to 0.5.6     </li></ul><hr><p>Already supported to Catalina 10.15.3</p><hr><h4 id="2020-02-20-更新："><a href="#2020-02-20-更新：" class="headerlink" title="2020-02-20 更新："></a>2020-02-20 更新：</h4><ul><li>修复USB3.0接口， 现在USB-C和两个USB3.0速率正常了。</li></ul><hr><h4 id="2020-02-18-更新："><a href="#2020-02-18-更新：" class="headerlink" title="2020-02-18 更新："></a>2020-02-18 更新：</h4><ul><li><p>显卡ID改为 0x193b0005 ｜ MacBookPro13,1 ｜ Intel HD Graphics 530/4K  </p><p>  牺牲HEVC硬解，但是所有视频输出接口工作正常  </p></li><li><p>增加 <strong>LogoutHook</strong> 文件用于模拟NVRAM，请在安装完系统后将该文件夹放置在任意位置。并且在终端输入 <code>sudo defaults write com.apple.loginwindow LogoutHook /path/to/LogoutHook.command</code></p><p>  比如你放在<strong>下载</strong>文件夹内： <code>sudo defaults write com.apple.loginwindow LogoutHook /Users/xjn/Documents/LogoutHook/LogoutHook.command</code></p><p>  重启后，你会在/EFI/下看到nvram.plist，代表已经成功模拟了。</p><p>  <strong>！运行后不要删除补丁包 ！</strong></p></li><li><p>如果认为支持HEVC硬解更重要，可以下载 <a href="https://github.com/Road-tech/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/raw/master/EFI-630.zip">EFI-630.zip</a>。 此EFI显卡ID设置为 0x59120000 ｜iMac18,2 ｜    Intel HD Graphics HD630  </p><p>  <strong>！ 此EFI仅中间的HDMI接口可以使用 ！</strong></p></li><li><p>定制USB接口，修复USB-C接口（现在可以正反插），修复USB充电（现支持苹果快充）   </p></li><li><p>地区代码从<code>HK</code>改为<code>#a</code>, 修复Wi-Fi只能到300m的bug  </p></li></ul><h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><p><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/13EE6E89-9978-4196-BB65-22C892472BAA_1_105_c.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/8CB768EC-7D4C-49EA-9FDE-12661C0B0B63_1_105_c.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.12.45.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.40.26.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-02-18%E4%B8%8B%E5%8D%886.58.19.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.58.51.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%884.54.32.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%885.00.46.webp" alt="image"><br><img src="https://npm.elemecdn.com/road-blog-figure-webp@1.0.1/Hackintosh_Asus-H110s1_QL2X_DW1820A_OC/%E6%88%AA%E5%B1%8F2020-01-27%E4%B8%8B%E5%8D%885.01.24.webp" alt="image"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.daliansky.net/OpenCore-BootLoader.html">精解OpenCore</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁 </a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a> - <a href="https://blog.xjn819.com/">XJN</a> </p><p><a href="https://blog.xjn819.com/?p=7">Asrock deskmini 310-com hackintosh 10.14-10.15 EFI</a> - <a href="https://blog.xjn819.com/">XJN</a></p><p><a href="http://bbs.pcbeta.com/viewthread-1801615-1-1.html">分享EFI 华硕H110S1 STX主板 i3-8100 UHD630</a> - <a href="http://i.pcbeta.com/space-uid-3336274.html">mike20080924</a></p><p><a href="https://blog.daliansky.net/DW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html">DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势</a> - <a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p>]]></content>
    
    
    <summary type="html">19年底几位大佬掀起了一波1L小主机的热潮，作为一名沉迷捡垃圾多年的垃圾佬，再加上不爱打游戏，喜欢小主机多年，这股热潮自然也是不会错过的。19年捡了不少二手硬件：HP 800 G1 DM，华硕H110t，精英H110S2p，还有今天的主角——华硕H110S1。过年宅在家不能出门，也正好捋一捋自己捡的一堆硬件。把机子装起来，写文章记录一下。 下面来讲讲这些硬件的故事： 主板和机箱是逛闲鱼无意刷到的，因为之前虽然也想装stx主机，但是我已经收到了一块精英H110s2p了。但是感觉卖家价格挺合理的，单买机箱也要200了，那算下来主板400。虽然没有很便宜，但是考虑到这类stx主板很小众，也没砍价就直接下单了。 散热器是看卖家的拍的照片，发现用的是这个猫头鹰散热，问他愿不愿意搭车卖，卖家很爽快，加100就好了。愉快下单捋一捋2019捡的垃圾：华硕H110S1+QL2X+黑苹果（OC+Catalina）</summary>
    
    
    
    <category term="mini主机" scheme="https://road-tech.github.io/hexo/categories/mini%E4%B8%BB%E6%9C%BA/"/>
    
    
    <category term="装机" scheme="https://road-tech.github.io/hexo/tags/%E8%A3%85%E6%9C%BA/"/>
    
    <category term="迷你主机" scheme="https://road-tech.github.io/hexo/tags/%E8%BF%B7%E4%BD%A0%E4%B8%BB%E6%9C%BA/"/>
    
    <category term="STX" scheme="https://road-tech.github.io/hexo/tags/STX/"/>
    
    <category term="QL2X" scheme="https://road-tech.github.io/hexo/tags/QL2X/"/>
    
    <category term="Opencore" scheme="https://road-tech.github.io/hexo/tags/Opencore/"/>
    
    <category term="Hackintosh" scheme="https://road-tech.github.io/hexo/tags/Hackintosh/"/>
    
  </entry>
  
</feed>
